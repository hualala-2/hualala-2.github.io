<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring Boot入门</title>
      <link href="/2021/11/10/Spring-Boot%E5%85%A5%E9%97%A8/"/>
      <url>/2021/11/10/Spring-Boot%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><p>直接看这个吧，狂神原件：</p><p><a href="https://www.cnblogs.com/zhuchengbo/p/12688161.html#2">狂神说SpringBoot - 月佩半琪 - 博客园 (cnblogs.com)</a></p><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>Spring：2003年兴起的一款为简化企业级开发的、轻量级的开发框架，作者：Rod Johnson </p><p>Spring Boot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化新 Spring 应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。用我的话来理解，就是 Spring Boot 其实不是什么新的框架，它默认配置了很多框架的使用方式，就像 Maven 整合了所有的 Jar 包，Spring Boot 整合了所有的框架。</p><p>程序 = 数据结构 + 算法（集合框架）</p><ul><li><p>什么是微服务架构？</p><p>微服务架构是一种架构风格，它要求我们在开发一个应用的时候，这个应用必须构建成一系列小服务的组合；可以通过http、rpc等方式进行互通。要说微服务架构，先得说说过去我们的单体应用架构。</p></li><li><p>单体微服务架构</p><p>所谓的单体应用架构（all in one）是指，我们将一个应用中的所用应用服务都封装在一个应用中。</p><p>无论是ERP、CRM或是其他什么系统，都是把数据库访问、web访问等各个功能放在一个war包内。</p><p>这样做的好处是，易于开发和测试；也十分方便部署，当需要扩展时，只需要将war包复制多份，然后放到多个服务器上，再做个负载均衡就可以了。</p><p>单体应用架构的缺点是，哪怕只要修改一个非常小的地方，我们都需要停掉整个服务，重新打包、部署这个应用war包。特别是对于一个大型应用，我们不可能把所有内容都放在一个应用中。如何维护和分工合作都是问题。</p></li><li><p>微服务架构    </p><p>all in one的架构方式，我们把所有的功能单元放在一个应用里面，然后我们把整个应用部署到服务器上。如果负载能力不行，我们将整个应用进行水平复制，进行扩展，然后再负载均衡。</p><p>所谓的微服务架构，就是打破之前all in one的架构方式，把每个功能元素独立出来。把独立出来的功能元素动态组合，需要的功能元素才拿来组合。所以微服务架构是对功能元素进行复制，而没有对整个应用进行复制。</p><p>这样做的好处：</p><p>1、节省了调用资源</p><p>2、每个功能元素的服务都是一个可替换的、可独立升级的软件代码。</p><p>MVC三层架构    MVVM    微服务架构</p><p>业务：service：userService：===&gt;模块！</p><p>Spring MVC，controller ===&gt; 提供接口</p><p>用户下单：调用controller！</p><p>需要做的事情（消息队列）：仓库冻结；资金冻结；验证；购买成功；仓库数量减少；仓库解冻；资金解冻</p><p>高内聚低耦合便于升级</p></li><li><p>如何构建微服务</p><p>一个大型系统的微服务架构，就像一个复杂交织的神经网络，每一个神经元就是一个功能元素，他们各自完成自己的功能，然后通过http相互请求调用。比如一个电商系统，查缓存、连数据库、浏览页面、结账、支付等服务都是一个个独立的功能服务，都被微化了，它们作为一个个微服务共同构建了一个庞大的系统。如果修改了其中一个功能，只需要更新升级其中一个功能服务单元即可。</p><p>但是这种庞大的系统构架给部署和运维带来很大的难度。于是，Spring为我们带来了构建大型分布式微服务的全套、全程产品：</p><ul><li>构建一个个功能独立的微服务应用模块，可以使用Spring Boot</li><li>大型分布式网络服务的调用，这部分由Spring Cloud来完成，实现分布式；</li><li>在分布式中间，进行流式数据计算、批处理，我们有Spring Cloud Data Flow。</li></ul><p>Spring为我们想清楚了整个从开始构建应用到大型分布式应用全流程方案。</p><ul><li><p>原理初探</p><p>pom.xml</p><ul><li>spring-boot-dependencies：核心依赖在父工程中</li><li>我们在引入一些Spring Boot依赖时，不需要指定版本号，就是因为在父工程中有这些版本仓库</li></ul><p>启动器：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>启动器：说白了就是Spring Boot的启动场景</li><li>比如spring-boot-starter-starter-web，他就会帮我们自动导入web环境所有的依赖！</li><li>Spring Boot会将所有的功能场景都变成一个个启动器</li><li>我们要使用什么功能，就只需要找到对应的启动器就可以了<code>starter</code></li></ul><p>主程序：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//标注这是一个Spring Boot应用：启动类下的所有资源被导入</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloworldApplication</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(HelloworldApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration</span>:Spring Boot的配置</span><br><span class="line">    <span class="meta">@Configuration</span>：Spring配置类</span><br><span class="line">    <span class="meta">@Component</span>：说明这也是一个Spring的组件</span><br><span class="line">   </span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span>：自动配置</span><br><span class="line">    <span class="meta">@AutoConfigurationPackage</span>：自动配置包</span><br><span class="line">    <span class="meta">@Import(AutoConfigurationPackages.Register.class)</span>：自动配置`包注册`</span><br><span class="line">    <span class="meta">@Import(AutoConfigurationImportSelector.class)</span>：自动配置导入选择</span><br><span class="line">   </span><br><span class="line"><span class="comment">//获取所有的配置</span></span><br><span class="line">List&lt;String&gt; configurations = <span class="keyword">this</span>.getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>获取候选的配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(<span class="keyword">this</span>.getSpringFactoriesLoaderFactoryClass(), <span class="keyword">this</span>.getBeanClassLoader());</span><br><span class="line">    Assert.notEmpty(configurations, <span class="string">&quot;No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>兜兜转转最终指向了@EnableAutoConfiguration</p><p>巴拉巴拉 ………………………….</p><hr><p>结论：Spring Boot所有自动配置都是在启动的时候扫描并加载：spring.factories所有的自动配置类都在这里面，但是不一定生效，要判断条件是否成立，只要导入了对应的starter，就有对应的启动器了，有了启动器，我们自动装配就会生效，然后就配置成功！</p><ol><li>Spring Boot在启动的时候在类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值；</li><li>将这些值作为自动装配类导入容器，自动装配类就生效，帮我们进行配置工作；</li><li>以前我们需要自己配置的东西，自动装配类都帮我们解决了；</li><li>整个J2EE的整体解决方案和自动配置都在springboot-autoconfigure的jar包中；</li><li>他将所有需要导入的组件以全类名的方式返回，这些组件就会被添加到容器中；</li><li>它会给容器中导入非常多的自动装配类（xxxAutoConfiguration），就是给容器中导入这个场景需要的所有组件，并配置好这些组件；</li><li>有了自动配置类，免去了我们手动编写配置注入功能组件等的工作。</li></ol></li></ul></li></ul></li></ul><blockquote><p>Run</p></blockquote><p>我最初以为就是运行一个main方法，没想到却开启了一个服务；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloworldApplication</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//该方法返回以ConfigurableApplicationContext对象</span></span><br><span class="line">        <span class="comment">//参数一：应用入口的类参数二：命令行参数</span></span><br><span class="line">SpringApplication.run(HelloworldApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpringApplication.run分析</p><p>分析主要分为两部分，一部分是SpringApplication的实例化，而是run方法的执行；</p><blockquote><p>SpringApplication</p></blockquote><p>这个类主要做了以下四件事情：</p><ol><li>推断应用的类型是普通的项目还是Web项目</li><li>查找并加载所有可用初始化器，设置到initializers属性中</li><li>找到所有的应用程序监听器，设置到listeners属性中</li><li>推断并设置main方法的定义类，找到运行的主类</li></ol><blockquote><p>run</p></blockquote><img src="..\Spring-Boot入门\run方法.PNG"/><p>关于Spring Boot，谈谈你的理解：</p><ol><li>自动装配</li><li>run()</li></ol><p>全面接管SpringMVC的配置</p><h2 id="配合如何编写-yaml"><a href="#配合如何编写-yaml" class="headerlink" title="配合如何编写 yaml"></a>配合如何编写 yaml</h2><blockquote><p>配置文件</p></blockquote><p>Spring Boot使用一个全局的配置文件，配置文件名称是固定的</p><ul><li><p>application.properties</p><ul><li>语法结构：key=value</li></ul></li><li><p>application.yaml</p><ul><li>语法结构：key：空格 value</li></ul></li></ul><p>配置文件的作用：修改Spring Boot自动配置的默认值，因为Spring Boot在底层都给我们自动配置好了</p><p>松散绑定：这个什么意思呢？比如我的yml中写的last-name，这个和lastName是一样的，后面跟的字母默认大写的，这就是松散绑定</p><p>JSR303数据校验，这个就是我们可以在字段增加一层过滤验证，可以保证数据的合法性</p><p><a href="https://www.jianshu.com/p/d2ddd856cce2">JSR303数据校验 - 简书 (jianshu.com)</a></p><p>结论：</p><ul><li>配置yml和配置properties都可以获取到值，强烈推荐yml</li><li>如果我们在某个业务中，只需要获取配置文件中的某个值，可以使用以下@value</li><li>如果说，我们专门编写了一个JavaBean来和配置文件进行映射，就直接使用@ConfigurationProperties，不要犹豫！</li></ul><h2 id="自动装配原理：重要谈资"><a href="#自动装配原理：重要谈资" class="headerlink" title="自动装配原理：重要谈资"></a>自动装配原理：重要谈资</h2><h2 id="集成Web开发：业务的核心"><a href="#集成Web开发：业务的核心" class="headerlink" title="集成Web开发：业务的核心"></a>集成Web开发：业务的核心</h2><h2 id="集成数据库：Druid"><a href="#集成数据库：Druid" class="headerlink" title="集成数据库：Druid"></a>集成数据库：Druid</h2><h2 id="分布式开发：Dobbo-zookeeper"><a href="#分布式开发：Dobbo-zookeeper" class="headerlink" title="分布式开发：Dobbo+zookeeper"></a>分布式开发：Dobbo+zookeeper</h2><h2 id="swagger：接口文档"><a href="#swagger：接口文档" class="headerlink" title="swagger：接口文档"></a>swagger：接口文档</h2><h2 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h2><h2 id="SpringSecurity：Shiro"><a href="#SpringSecurity：Shiro" class="headerlink" title="SpringSecurity：Shiro"></a>SpringSecurity：Shiro</h2><h1 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h1><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><h2 id="Spring-Cloud入门"><a href="#Spring-Cloud入门" class="headerlink" title="Spring Cloud入门"></a>Spring Cloud入门</h2><h2 id="Restful"><a href="#Restful" class="headerlink" title="Restful"></a>Restful</h2><h2 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h2><h2 id="Ribborn"><a href="#Ribborn" class="headerlink" title="Ribborn"></a>Ribborn</h2><h2 id="Fegin"><a href="#Fegin" class="headerlink" title="Fegin"></a>Fegin</h2><h2 id="HyStrix"><a href="#HyStrix" class="headerlink" title="HyStrix"></a>HyStrix</h2><h2 id="Zuul路由网关"><a href="#Zuul路由网关" class="headerlink" title="Zuul路由网关"></a>Zuul路由网关</h2><h2 id="Spring-Cloud-config：Git"><a href="#Spring-Cloud-config：Git" class="headerlink" title="Spring Cloud config：Git"></a>Spring Cloud config：Git</h2><h1 id="IDEA快捷键"><a href="#IDEA快捷键" class="headerlink" title="IDEA快捷键"></a>IDEA快捷键</h1><ol><li>自动导包、自动删包：勾选巴拉巴拉</li><li></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/zhuchengbo/p/12688161.html#2">狂神说SpringBoot - 月佩半琪 - 博客园 (cnblogs.com)</a></p><p><a href="https://www.bilibili.com/video/BV1PE411i7CV?p=12&spm_id_from=pageDriver">【狂神说Java】SpringBoot最新教程IDEA版通俗易懂_哔哩哔哩_bilibili</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2^32=4GB?</title>
      <link href="/2021/11/08/2-32-4GB/"/>
      <url>/2021/11/08/2-32-4GB/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么32位操作系统最大支持4G内存？"><a href="#为什么32位操作系统最大支持4G内存？" class="headerlink" title="为什么32位操作系统最大支持4G内存？"></a>为什么32位操作系统最大支持4G内存？</h1><h2 id="内存的最基础单位"><a href="#内存的最基础单位" class="headerlink" title="内存的最基础单位"></a>内存的最基础单位</h2><p>1个Byte（字节）可以看成是由8个<strong>物理上连续</strong>的bit（位）组成的。</p><h2 id="内存是计算机的主存储器"><a href="#内存是计算机的主存储器" class="headerlink" title="内存是计算机的主存储器"></a>内存是计算机的主存储器</h2><p><strong>内存作为1个存储数据的存在， 有1个很重要的特性， 就是内存里的数据能被cpu直接访问。</strong>cpu能不能直接访问硬盘的数据呢， 不能。 只能通过把硬盘的数据先放到内存里， 然后再从内存里访问硬盘的数据。我们平时玩游戏碰上读图loading 进度条的这个过程， 就是把数据从硬盘读到内存的过程啊。 读完条后地图的数据就在内存中了。</p><p>所以内存才是计算机系统的主存储器， 而硬盘是被分到跟光盘、u盘一类都是外部存储器。</p><h2 id="内存的基本结构"><a href="#内存的基本结构" class="headerlink" title="内存的基本结构"></a>内存的基本结构</h2><p>内存里存放的数据是什么呢？ 其实也是只是存放0或者1这两个二进制数字啊， 所以内存里实际上有海量的小格子，每1个格子是1个 <strong>bit</strong>，就只能存放1个数字（0或者1）， 那么数值255需要几个格子来放呢？ 就是8个格子啊， 1个字节 <strong>byte</strong>啊。</p><p>但是问题来了， 我刚说了内存里的格子数量非常巨大， 如果cpu要读出某个指定的数据， 怎么去找呢？</p><p>1个1个格子去遍历吗， 其实稍微接触过数据结构的都知道， 遍历虽然实现简单， 但是在海量数据面前简直是自杀行为。</p><p>所以实际上内存是把8个8个bit排成1组， 每1组成为1个单位， 大小是1 <strong>byte</strong>(字节）， cpu每一次只能访问1个byte， 而不能单独去访问具体的1个小格子(bit)。<strong>1个byte字节就是内存的最小的IO单位</strong>。</p><p>大部分数据都会作为各种数据类型存放在内存内， 而各种数据类型所占的字节大小也是不同的。</p><h2 id="引入内存地址的概念"><a href="#引入内存地址的概念" class="headerlink" title="引入内存地址的概念"></a>引入内存地址的概念</h2><p> 即使我们把内存分成了以字节为单位的结构， 但是实际上内存里还是有非常多的字节的，例如64MB内存就有 64 × 1024 × 1024 个字节啊！</p><p>如果cpu要查找1个变量， 还是要1个个字节去找到话，显然是浪费时间的行为，所以为了避免去遍历内存，计算机系统就引入了内存地址这个概念。</p><p>举个例子, 内存就是一栋大楼， 而内存里每1个字节就是大楼的每个房间， 而内存地址就是房间的门牌号码了。如果没有门牌号码,我们去访问某个住在大楼的人是十分苦难的， 只能从1楼开始每个房间去敲门， 如果那个人住在顶楼你就悲剧了。而如果你知道那个人的门牌号码， 就可以直接上去敲他的门查他水表了，实在是方便很多啊。</p><p>内存也一样, <strong>计算机操作系统</strong>会给内存每1个字节分配1个内存地址, cpu只需要知道某个数据类型的地址, 就可以 <strong>直接</strong>去对应的内存位置去提取数据了。</p><h2 id="直接寻址技术"><a href="#直接寻址技术" class="headerlink" title="直接寻址技术"></a>直接寻址技术</h2><p>当代计算机还实现了1个逆天的技术,就是直接寻址了。</p><p>什么意思呢, 还是用上面的例子说明,  假如你知道你要找的人住在那栋大楼的17楼 1702, 但是你还是需要从1楼走到17楼去找他, 这个过程还是需要时间成本的。</p><p>但是如果你具有了直接寻址技术, 就能直接跳到17楼 1702门前, 如果你找的下1个人在2楼, 又能从17楼直接跳到2楼, 逆天啊！！！</p><p>而直接寻址技术已经成为当代计算机软硬件的标准技术之一了, 也就是说只要CPU知道要访问数据的内存地址, 就能直接到内存的对应位置去访问数据！</p><h2 id="内存地址的表示方式"><a href="#内存地址的表示方式" class="headerlink" title="内存地址的表示方式"></a>内存地址的表示方式</h2><p> 跟门牌号一样, 其实内存地址也是由一个二进制数字来表示的。   每1个地址对应内存里的1个byte字节, 如果地址的值加1, 那么这个地址就对应下1个字节了。 </p><p>那么内存地址的长度是多少呢? 这个就是这篇文章标题所涉及的。在32位操作系统中, <strong>内存的地址就是32位的二进制数</strong>, 那么假如32位系统的某个内存地址是:0000 1111 1111 0000 1111 0000 1111 0000<br>那么它可以用十六进制表示成： 0   F   F   0   F    0   F   0 </p><p>也就是 <strong>Ox</strong>0ff0f0f0 前面Ox代表十六进制, 所以你见到这种字母数字混合一次的地址方式,就是这样得来的了, 它实际上是1个二进制的数字啊. 不过计算机里面所有的东西都是二进制了。</p><h2 id="内存地址的数量决定CPU能访问的内存大小"><a href="#内存地址的数量决定CPU能访问的内存大小" class="headerlink" title="内存地址的数量决定CPU能访问的内存大小"></a>内存地址的数量决定CPU能访问的内存大小</h2><p>上面说了, 既然32位系统里内存地址长度是32位的. 所以32位的地址范围就是从 0000 0000 0000 0000 0000 0000 0000 0000 到 1111 1111 1111 1111 1111 1111 1111 1111 啦（Ox00000000 ~ OxFFFFFFFF)， 这里有几个地址呢？ 明显是有 2^32 个啦。</p><p>那么2^32到底是多少个？ 2^32 = 4 * 1024(G) * 1024(M) * 1024(K) = 4294967296 , 就是<strong>4G</strong> 啊, 而每1个地址对应1个1个字节， 容量就是1byte， 所以2^32个地址就总共能对应应<strong>4G*<em>B*</em></strong> 的内存容量啊， 这里的B指的是byte 字节啊。</p><p>假如你给32位的系统配上了8GB的内存， 操作系统最多也只能给其中4GB 分配地址， 其余 4GB 是没有地址， 因为地址不够用啊， 所以32位系统最多支持4GB内存就是这样来的。</p><p>​      那么64位系统呢， 对应地， 64位系统的内存地址是64位的二进制数啊， 0000 …64个0 ~ 1111 …64个1, 用十六进表示就是从Ox0000000000000000 ~ OxFFFFFFFFFFFFFFFF , 每个地址的长度比32位的长度多1倍！  而64位系统总共有多少个地址？</p><p>​      2^64 = 2^34 *  2^10(G) * 2^10(M) * 2^10(K)   也就是 17179869184 G（4G × 4G）个地址， 我艹这是神码概念， 也就是说64位系统配上64位cpu理论上支持17多亿GB的内存， 当然这个只是理论了， 实际上现在的普通主版能上个16GB都不错了。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/weixin_30325971/article/details/95698467?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-2.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-2.no_search_link">详解为什么32位系统只能用4G内存._weixin_30325971的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 计组计网操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计组计网操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>版本控制工具Git</title>
      <link href="/2021/10/24/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7Git/"/>
      <url>/2021/10/24/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7Git/</url>
      
        <content type="html"><![CDATA[<h1 id="狂神聊Git-笔记"><a href="#狂神聊Git-笔记" class="headerlink" title="狂神聊Git(笔记)"></a>狂神聊Git(笔记)</h1><p>Git：分布式版本控制系统，管理多人协同开发的技术，仓库的所有版本信息全部同步到本地的每个用户。不会因为服务器或者网络问题，造成不能工作的情况！</p><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><ul><li><p>Git与SVN最主要区别（图像记忆）</p><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而在工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。</p><p>Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需要把各自的修改送给对方，就可以互相看到对方的修改了。Git可以直接看到更新了哪些代码和文件！</p><p><strong>Git是目前世界上最先进的分布式版本控制系统</strong></p></li></ul><h2 id="聊聊Git历史"><a href="#聊聊Git历史" class="headerlink" title="聊聊Git历史"></a>聊聊Git历史</h2><p>Linux与Git之父：Linus</p><h2 id="Git环境配置"><a href="#Git环境配置" class="headerlink" title="Git环境配置"></a>Git环境配置</h2><p>安装完之后，有三个可以打开的应用。</p><p>Git Bash：Unix与Linux风格的命令行，使用最多，推荐最多，<strong>使用Ctrl+滚轮</strong></p><p>Git CMD：Windows风格的命令行</p><p>Git GUI：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令</p><ul><li><p>显示当前Git的配置（l：list）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config -l</span><br></pre></td></tr></table></figure></li><li><p>显示系统为Git提供的配置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --system --list</span><br></pre></td></tr></table></figure></li><li><p>全局配置，该配置说明你是谁</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global --list</span><br></pre></td></tr></table></figure></li></ul><p>Git的相关配置文件：</p><ol><li>Git\etc\gitconfig：Git安装目录下的gitconfig      –system系统级</li><li>C:\Users\Administrator（个性化配置的当前用户）\ .gitconfig        只适用于当前登录用户的配置        –global全局</li></ol><ul><li><p>设置用户名与邮箱（<strong>用户标识，必要</strong>）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;hualala-2&quot;#名称</span><br><span class="line">git config --global user.email &quot;hualala_2@aliyun.com&quot;#邮箱</span><br></pre></td></tr></table></figure></li></ul><h2 id="Git基本理论"><a href="#Git基本理论" class="headerlink" title="Git基本理论"></a>Git基本理论</h2><p><strong>核心，所有实践都源于这个理论</strong></p><ul><li><p>工作区域</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">A[Remote Directory]--git pull--&gt;B[History];</span><br><span class="line">B--git push--&gt;A;</span><br><span class="line">B--git reset--&gt;C;</span><br><span class="line">C[Stage_index]--git commit--&gt;B;</span><br><span class="line">C--git checkout--&gt;D[Working Directory];</span><br><span class="line">D--git add--&gt;C;</span><br></pre></td></tr></table></figure></li><li><p>Workspace：工作区，就是你平时存放项目代码的地方</p></li><li><p>Index/Stage：暂存区，用于临时存放你的变动，事实上它只是一个文件，保存即将提交到文件列表信息</p></li><li><p>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据，其中HEAD指向最新放入仓库的版本</p></li><li><p>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台用于远程交换数据的电脑</p></li></ul><img src="..\版本控制工具Git\Git工作区域.PNG"/><p>Git的工作流程一般是这样的：</p><ol><li>在工作目录中添加、修改文件；</li><li>将需要进行版本管理的文件放入暂存区域；</li><li>将暂存区域的文件提交到Git仓库。</li></ol><p>因此，Git管理的文件有三种状态：已修改（modified）、已暂存（staged），已提交（committed）</p><h2 id="Git项目搭建"><a href="#Git项目搭建" class="headerlink" title="Git项目搭建"></a>Git项目搭建</h2><blockquote><p>创建工作目录与常用命令</p></blockquote><p>工作目录（Workspace）一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p><p>日常使用只要记住下图的6个命令：</p><img src="..\版本控制工具Git\常用命令.PNG"/><blockquote><p>本地仓库搭建</p></blockquote><p>创建本地仓库的方法有两种：一种是创建全新的仓库，另一种是克隆远程仓库。</p><ol><li><p>创建全新的仓库，需要用Git管理的项目的根目录执行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在当前目录下新建一个Git代码库</span></span><br><span class="line">git init</span><br></pre></td></tr></table></figure></li><li><p>执行后可以看到，仅仅在项目目录多出了一个.git目录，关于版本等所有信息都在这个目录里面。</p></li></ol><blockquote><p>克隆远程仓库</p></blockquote><ol><li><p>另一种方式是克隆远程目录，即将远程服务器上的仓库完全镜像一份至本地。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 克隆一个项目和它的整个代码历史（版本信息）</span></span><br><span class="line">git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure></li><li><p>去gitee或者github上克隆一个测试！</p></li></ol><h2 id="Git文件操作"><a href="#Git文件操作" class="headerlink" title="Git文件操作"></a>Git文件操作</h2><ul><li><p>查看文件状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将所有文件添加到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment"># 查看文件状态，确认文件是否被添加到暂存区</span></span><br><span class="line">git status</span><br><span class="line"><span class="comment"># 将文件添加到本地库</span></span><br><span class="line">git commit -m <span class="string">&quot;new file hello.txt&quot;</span></span><br><span class="line"><span class="comment"># 查看文件状态，确认文件添加到本地库</span></span><br><span class="line">git status</span><br></pre></td></tr></table></figure></li><li><p>忽略文件</p><p>有时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p><p>在主目录下建立“.gitignore”文件，此文件有如下规则：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*.txt <span class="comment"># 忽略所有.txt结尾的文件，这样的话上传就不会被选中！</span></span><br><span class="line">!lib.txt <span class="comment"># 但lib.txt除外</span></span><br><span class="line">/temp <span class="comment"># 仅忽略项目根目录下的TODO文件，不包括其他目录temp</span></span><br><span class="line">build/ <span class="comment"># 忽略build/目录下的所有文件</span></span><br><span class="line">doc/*.txt <span class="comment"># 会忽略doc/notes.txt，但不包括doc/server/arch.txt</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="使用码云"><a href="#使用码云" class="headerlink" title="使用码云"></a>使用码云</h2><p>Github是有墙的，比较慢，在国内的话，我们一般使用gitee，公司中有时候会搭建自己的gitlab服务器。</p><ol><li><p>注册登录码云，完善个人信息</p></li><li><p>设置本机绑定SSH公钥，实现免密登录！</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入 C:\Users\Administrator\.ssh目录</span></span><br><span class="line"><span class="comment"># 生成公钥</span></span><br><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure></li><li><p>将公匙信息public key添加到码云账户中即可！</p></li><li><p>使用码云创建一个自己的仓库！</p></li></ol><h2 id="IDEA中集成Git"><a href="#IDEA中集成Git" class="headerlink" title="IDEA中集成Git"></a>IDEA中集成Git</h2><ol><li>新建项目，绑定Git。<ul><li>将我们远程的Git文件目录拷贝到项目中即可！</li></ul></li><li>修改文件，使用IDEA操作Git。（也可直接在Terminal操作）<ul><li>添加到暂存区</li><li>commit提交</li><li>push到远程仓库</li></ul></li><li>提交测试。</li></ol><h2 id="说明：Git分支"><a href="#说明：Git分支" class="headerlink" title="说明：Git分支"></a>说明：Git分支</h2><p>分支在Git中相对较难，分支就是科幻电影里面的平行宇宙，如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，我们就需要处理一些问题了！</p><ul><li><p>Git分支中常用指令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 和并指定分支到当前分支</span></span><br><span class="line">git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">git push origin --delete [branch-name]</span><br><span class="line">git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure></li></ul><p>多个分支如果并行执行，就会导致我们代码不冲突，也就是同时存在多个版本！</p><p>如果同一个文件在合并分支时都被修改了，则会造成冲突：<strong>解决的办法是我们可以修改冲突文件后重新提交！（两人经过商量后，决定保留谁的代码）</strong></p><p>master主分支应该非常稳定，用来发布新版本，一般情况下不允许在上面工作，工作一般情况下在新建的dev分支上工作，工作完后，比如上要发布，或者说dev分支代码稳定后，可以合并到主分支master上来。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.bilibili.com/video/BV1FE411P7B3?p=4&spm_id_from=pageDriver">【狂神说Java】Git最新教程通俗易懂_哔哩哔哩_bilibili</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂记知识</title>
      <link href="/2021/10/16/%E6%9D%82%E8%AE%B0%E7%9F%A5%E8%AF%86/"/>
      <url>/2021/10/16/%E6%9D%82%E8%AE%B0%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>#ping通多台pc（虚拟机模拟）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">ping通另一台电脑</span></span><br><span class="line">ping 192.168.1.100 </span><br><span class="line"><span class="meta">#</span><span class="bash">查看本机IP</span></span><br><span class="line">ifconfig（Linux）</span><br><span class="line">ipconfig（Win）</span><br><span class="line"><span class="meta">#</span><span class="bash">分配一个可用的ip地址</span></span><br><span class="line">dhclient</span><br><span class="line"><span class="meta">#</span><span class="bash">进入配置网卡的文件</span></span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">配置网卡，固定网址</span></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static（dhcp）（改动处1）</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=b069944f-2f31-4b78-b283-7d1ef493f86a</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes（no）（改动处2）</span><br><span class="line">IPADDR=192.168.1.104（新增）（改动处3）#ip地址</span><br><span class="line">NETMASK=255.255.255.0（新增）#子网掩码</span><br><span class="line">GATEWAY=192.168.1.1（新增）#网关</span><br><span class="line">DNS1=119.29.29.29（新增）##公网DNS</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">重启网卡</span></span><br><span class="line">systemctl restart network.service</span><br></pre></td></tr></table></figure><ul><li><p>tips:</p><p>宿主机可以ping通虚拟机，但虚拟机ping不同宿主机，该咋办？</p><p>关闭宿主机防火墙。</p></li></ul><h1 id="包管理工具scoop"><a href="#包管理工具scoop" class="headerlink" title="包管理工具scoop"></a>包管理工具scoop</h1><ul><li><p><strong>在powershell下安装包管理工具scoop</strong></p><p>情景：你试图执行的操作需要提升权限，那么你可以使用“RunasAdministrator”选项启动Powershell，并更改执行策略，成功后，你就可以执行你的操作了<br>执行：get-ExecutionPolicy，显示Restricted，表示状态是禁止的，如果是RemoteSigned，那么就不用往下执行了<br>以管理员启动：Start-Process powershell -Verb runAs<br>执行：set-ExecutionPolicy RemoteSigned<br>这时再执行get-ExecutionPolicy，就显示RemoteSigned</p><p>​        Restricted——默认的设置， 不允许任何script运行<br>​        AllSigned——只能运行经过数字证书签名的script<br>　　RemoteSigned——运行本地的script不需要数字签名，但是运行从网络上下载的script就必须要有数字签名<br>　　Unrestricted——允许所有的script运行</p></li><li><p><strong>安装完成后，还需要添加软件源，不然会有好些软件能search到但是不能install</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scoop bucket add extras</span><br><span class="line">scoop bucket add versions</span><br></pre></td></tr></table></figure></li><li><p><strong>输入如下命令即可安装需要的软件</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scoop install &lt;软件名&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>如果是安装到global目录，命令如下</strong>：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scoop install -g &lt;软件名&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>软件搜索</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scoop search &lt;软件名&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>软件安装</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装aria2以加快scoop下载速度</span></span><br><span class="line">scoop install aria2</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>（网络不好搞得头大:sheep::sheep::sheep:）</p><ul><li><strong>参考文献</strong></li></ul><p><a href="https://blog.csdn.net/weixin_37891983/article/details/105231263">Scoop安装详解_boyinthesun的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/luoyooi/article/details/102990113">Windows下Scoop安装、配置与使用_luoyooi的博客-CSDN博客_scoop</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机入门（计组/计网/操作系统）</title>
      <link href="/2021/10/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%85%A5%E9%97%A8%EF%BC%88%E8%AE%A1%E7%BB%84-%E8%AE%A1%E7%BD%91-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%89/"/>
      <url>/2021/10/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%85%A5%E9%97%A8%EF%BC%88%E8%AE%A1%E7%BB%84-%E8%AE%A1%E7%BD%91-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h1><h2 id="概述篇"><a href="#概述篇" class="headerlink" title="概述篇"></a>概述篇</h2><h3 id="计算机的发展简史"><a href="#计算机的发展简史" class="headerlink" title="计算机的发展简史"></a>计算机的发展简史</h3><h4 id="计算机发展的四个阶段"><a href="#计算机发展的四个阶段" class="headerlink" title="计算机发展的四个阶段"></a>计算机发展的四个阶段</h4><ul><li><p>1946-1957：电子管计算机</p><p>埃尼阿克（ENIAC）</p></li><li><p>1957-1964：晶体管计算机</p><p>PDP-1</p></li><li><p>1964-1980：集成电路计算机</p></li><li><p>1980-现在：超大规模集成电路计算机</p></li><li><p>畅想：第五阶段，未来的计算机</p><p>1、生物计算机        2、量子计算机</p></li></ul><h4 id="微型计算机的发展历史"><a href="#微型计算机的发展历史" class="headerlink" title="微型计算机的发展历史"></a>微型计算机的发展历史</h4><ul><li><p>单核CPU：</p><p>摩尔定律：当价格不变时，集成电路的性能，每18-24个月就会提升一倍（21世纪已失效）</p></li><li><p>多核CPU（单核CPU达到瓶颈）</p></li></ul><h3 id="计算机的分类"><a href="#计算机的分类" class="headerlink" title="计算机的分类"></a>计算机的分类</h3><ul><li><p>超级计算机</p><p>标记他们运算速度的单位：TFlop/s（每秒一万亿次浮点计算）</p><p>Summit、神威太湖之光、Sierra、天河二号、天河一号</p></li><li><p>大型计算机</p><p>去“IOE”行动</p></li><li><p>迷你计算机（服务器）</p><p>联想、华为等</p><p>普通服务器以及代替了传统的大型机，成为大规模企业计算的中枢（阿里云、腾讯云）</p></li><li><p>工作站</p><p>高端的通用微型计算机</p></li><li><p>微型计算机（个人计算机）</p><p>台式机、笔记本电脑、一体机</p></li><li><p>微型计算机</p></li></ul><h3 id="计算机的体系结构"><a href="#计算机的体系结构" class="headerlink" title="计算机的体系结构"></a>计算机的体系结构</h3><h4 id="冯诺依曼体系"><a href="#冯诺依曼体系" class="headerlink" title="冯诺依曼体系"></a>冯诺依曼体系</h4><p>将程序指令与数据一起存储的计算机设计概念结构</p><p>现代计算机都是冯诺依曼机</p><p>冯诺依曼结构如图所示：</p><img src="..\计算机入门（计组-计网-操作系统）\冯诺伊曼.PNG"/><p>由于CPU与存储器分开，会导致一个问题，即冯诺依曼瓶颈。</p><p>冯诺依曼瓶颈：CPU（central processing unit）和存储器速率之间的问题无法调和。CPU处理速度快，而CPU与存储器之间的传输速度慢，这就导致了CPU经常空转等待数据传输。</p><h4 id="现代计算机的结构"><a href="#现代计算机的结构" class="headerlink" title="现代计算机的结构"></a>现代计算机的结构</h4><p>现代计算机结构如图所示：</p><img src="..\计算机入门（计组-计网-操作系统）\现代计算机的结构.PNG"/><p>现代计算机结构解决了什么问题？</p><p>现代计算机的存储器指的是围绕CPU的更高速的设备即内存、CPU的寄存器，</p><p>现代计算机的结构可以理解为以存储器为核心的结构。</p><h3 id="计算机的层次与编程语言"><a href="#计算机的层次与编程语言" class="headerlink" title="计算机的层次与编程语言"></a>计算机的层次与编程语言</h3><h4 id="程序翻译与程序解释"><a href="#程序翻译与程序解释" class="headerlink" title="程序翻译与程序解释"></a>程序翻译与程序解释</h4><p>程序翻译如图所示：</p> <img src="..\计算机入门（计组-计网-操作系统）\程序翻译.PNG"/><p>程序解释如图所示：</p><img src="..\计算机入门（计组-计网-操作系统）\程序解释.PNG"/><p>翻译型语言：C/C++、Object-C、Golang</p><p>解释型语言：Python、Php、Javascript</p><p>翻译型+解释型：Java、C#</p><p>Java文件经过类加载器得到class文件（字节码文件），字节码文件经过JVM得到机器码，扔给底层执行。</p><h4 id="计算机的层次与编程语言-1"><a href="#计算机的层次与编程语言-1" class="headerlink" title="计算机的层次与编程语言"></a>计算机的层次与编程语言</h4><img src="..\计算机入门（计组-计网-操作系统）\计算机的层次.PNG"/><h3 id="计算机的计算单位"><a href="#计算机的计算单位" class="headerlink" title="计算机的计算单位"></a>计算机的计算单位</h3><h4 id="容量单位"><a href="#容量单位" class="headerlink" title="容量单位"></a>容量单位</h4><ol><li><p>在物理层面，高低电平记录信息</p></li><li><p>理论上只认识0/1两种状态</p></li><li><p>0/1能够表示的内容太少了，需要更大的容量表示方法</p><p>0/1称为bit（比特位）</p></li></ol><p>容量单位（千兆G太派艾）：</p><table><thead><tr><th align="center"></th><th align="center">bit</th><th align="center">Byte</th><th align="center">KB</th><th align="center">MB</th><th align="center">GB</th><th align="center">TB</th><th align="center">PB</th><th align="center">EB</th></tr></thead><tbody><tr><td align="center">名称</td><td align="center">比特位</td><td align="center">字节</td><td align="center">千字节</td><td align="center">兆字节</td><td align="center">G字节</td><td align="center">太字节</td><td align="center">派字节</td><td align="center">艾字节</td></tr><tr><td align="center">比例</td><td align="center">-</td><td align="center">8bits</td><td align="center">1024B</td><td align="center">1024KB</td><td align="center">1024MB</td><td align="center">1024GB</td><td align="center">1024TB</td><td align="center">1024PB</td></tr><tr><td align="center">常见设备</td><td align="center">门电路</td><td align="center">-</td><td align="center">寄存器</td><td align="center">高速缓存</td><td align="center">内存/硬盘</td><td align="center">硬盘</td><td align="center">云硬盘</td><td align="center">数据仓库</td></tr></tbody></table><ul><li><p>为什么网上买的移动硬盘500G，格式化之后只剩465G了？</p><p>硬盘厂商一般用10进制标记容量</p><p>500*（1000^3)/(1024^3)即465</p></li></ul><h4 id="速度单位"><a href="#速度单位" class="headerlink" title="速度单位"></a>速度单位</h4><ul><li><p>100M宽带中的100M指的是什么呢？</p><p>100M/s</p></li><li><p>为什么电信拉的100M光纤，测试峰值只有12M每秒？</p><p>网络常用单位为Mbps</p><p>100M/s = 100Mbps = 100 Mbit/s</p><p>100Mbit/s = (100/8)MB/s = 12.5MB/s</p></li><li><p>CPU的速度</p><p>CPU的速度一般体现为CPU的时钟频率</p><p>CPU的时钟频率的单位一般是赫兹（Hz）</p><p>主流CPU的时钟频率都在2GHz以上</p><p>Hz其实就是秒分之一，并不是描述计算机领域所专有的单位</p><p>它是每秒中的周期性变动重复次数的计量</p></li></ul><img src="..\计算机入门（计组-计网-操作系统）\CPU速度.PNG"/><h3 id="计算机的字符与编码集"><a href="#计算机的字符与编码集" class="headerlink" title="计算机的字符与编码集"></a>计算机的字符与编码集</h3><h4 id="字符编码集的历史"><a href="#字符编码集的历史" class="headerlink" title="字符编码集的历史"></a>字符编码集的历史</h4><ol><li><p>ASCII码</p><ul><li><p>使用7个bits就可以完全表示ASCII码</p></li><li><p>包含95个可打印字符</p></li><li><p>33个不可打印字符（包含控制字符）</p></li><li><p>33+95 = 128 = 2^7</p><img src="..\计算机入门（计组-计网-操作系统）\ASCII码.PNG"/></li></ul></li><li><p>Extended ASCII码</p><ul><li><p>很多应用或者国家中的符号都无法表示</p></li><li><p>第一次对ASCII码进行扩充，由7bits到8bits</p><img src="..\计算机入门（计组-计网-操作系统）\ExtendedASCII码.PNG"/></li></ul></li><li><p>字符编码集的国际化</p><ul><li>欧洲、中亚、东亚、拉丁美洲国家的语言多样性</li><li>语言体系不一样，不以有限字符组合的语言</li><li>中国、韩国、日本等的语言最为复杂</li></ul></li></ol><h4 id="中文编码集"><a href="#中文编码集" class="headerlink" title="中文编码集"></a>中文编码集</h4><ol><li><p>GB2312（不符合国际的标准）</p><ul><li>《信息交换用汉字编码集——基本集》</li><li>一共收录了7445个字符</li><li>包括6763个汉字和682个其他字符</li></ul></li><li><p>GBK（本地化的编码，外国友人需要下载才能使用）</p><ul><li>《汉字内码扩展规范》</li><li>向下兼容GB2312，向上支持国际ISO标准</li><li>收录了21003个汉字，支持全部中日韩汉字</li></ul></li><li><p>兼容全球的字符编码集：Unicode</p><ul><li>Unicode：统一码、万国码、单一码</li><li>Unicode定义了世界通用的符号集，UTF-*实现了编码</li><li>UTF-8以字节为单位对Unicode进行编码</li><li>Windows系统默认使用GBK编码，编程推荐使用UTF-8编码</li></ul></li></ol><h2 id="组成篇"><a href="#组成篇" class="headerlink" title="组成篇"></a>组成篇</h2><h3 id="章节导学"><a href="#章节导学" class="headerlink" title="章节导学"></a>章节导学</h3><img src="..\计算机入门（计组-计网-操作系统）\计组导学.PNG"/><h3 id="计算机的总线与IO设备"><a href="#计算机的总线与IO设备" class="headerlink" title="计算机的总线与IO设备"></a>计算机的总线与IO设备</h3><h4 id="计算机的总线"><a href="#计算机的总线" class="headerlink" title="计算机的总线"></a>计算机的总线</h4><ol><li><p>总线的概述</p><p>1.1总线是什么？</p><ul><li><p>USB</p><p>Universal Serial Bus 通用串行总线</p><p>提供了对外的接口</p><p>不同设备可以通过USB设备进行连接</p><p>连接的标准，促使外围接口的统一</p></li><li><p>SATA总线（固态硬盘总线、不超过600MB/s）、PCIE总线（固态硬盘总线，1000MB/s）、ISA总线、Thunderbolt总线…….</p></li></ul><p><em><strong>总线是为了解决不同设备之间的通信问题而存在的</strong></em></p><p>1.2总线的分类</p></li></ol><ul><li><p>片内总线</p><ul><li>芯片内部的总线</li><li>寄存器与寄存器之间</li><li>寄存器与控制器、运算器之间</li></ul><p>高集成度芯片内部的信息传输线</p></li><li><p>系统总线</p><ul><li><p>数据总线</p><ul><li>双向传输各个部件的数据信息</li><li>数据总线的位数（总线宽度）是数据总线的重要参数</li><li>一般与CPU位数相同（32位、64位）</li></ul></li><li><p>地址总线  </p><ul><li>指定源数据或目的数据在内存中的地址</li><li>地址总线的位数与存储单元有关</li><li>地址总线位数=n，寻址范围：0~2^n</li></ul></li><li><p>控制总线</p><ul><li>控制总线是用来发出各种控制信号的传输线</li><li>控制信号经由控制总线从一个组件发给另一个组件</li><li>控制总线可以监视不同组件之间的状态（就绪/未就绪）</li></ul><p><em><strong>CPU、主存储、IO设备、各组件之间的信息传输线</strong></em></p></li></ul></li></ul><ol start="2"><li>总线的仲裁</li></ol><ul><li><p>为什么需要总线仲裁</p><p>假设主存需要和硬盘、IO设备交换数据，此时硬盘与IO设备都已就绪，那么主存该给谁使用呢？</p><p>答：第三方的仲裁器来解决设备使用的冲突问题。</p></li><li><p>总线仲裁的方法</p><ul><li><p>链式查询</p><img src="..\计算机入门（计组-计网-操作系统）\链式查询.PNG"/><ul><li>好处：电路复杂度低，仲裁方式简单</li><li>坏处：优先级低的设备难以获得总线使用权</li><li>坏处：对电路故障敏感</li></ul></li><li><p>计时器定时查询</p><ul><li>仲裁控制器对设备编号并使用计数器累计计数</li><li>接收到仲裁信号，往所有设备发出计数值（1、2、3依次累计）</li><li>计数值与设备编号一致，则获得总线使用权</li></ul></li><li><p>独立请求</p><ul><li>每个设备均有总线，独立连接仲裁器</li><li>设备可单独向仲裁器发送请求和接收请求</li><li>当同时受到多个请求信号，仲裁器有权按优先级分配使用权</li><li>好处：响应速度快，优先顺序可动态变化</li><li>设备连线多，总线控制复杂</li></ul></li></ul><p><em><strong>为了解决总线使用权的冲突问题</strong></em></p></li></ul><h4 id="计算机的输入-输出设备"><a href="#计算机的输入-输出设备" class="headerlink" title="计算机的输入/输出设备"></a>计算机的输入/输出设备</h4><ol><li><p>常见的输入输出设备</p><ul><li><p>字符输入设备</p><p>键盘：薄膜键盘、机械键盘（黑轴、红轴、青轴、茶轴）、电容键盘</p></li><li><p>图像输入设备</p><p>鼠标、数位板、扫描仪</p><p>数位板：输入板和压感笔，常用于绘图设计创作</p><p>扫描仪：将图形信息转换为数字信号</p></li><li><p>图像输出设备</p><p>显示器、打印机、投影仪</p></li></ul></li><li><p>输入输出接口的通用设计</p><p>输入输出接口应该完成哪些工作呢？</p><p>读取数据、允许我们向设备发送数据、通过接口判断设备有没有被占用、通过接口判断设备是否已连接、设备是否已经启动等</p><p>面对这样的需求，我们该怎样设计输入输出接口呢？</p><ul><li>数据线<ul><li>是I/O设备与主机之间进行数据交换的传送线</li><li>单向传输数据线</li><li>双向传输数据线</li></ul></li><li>状态线<ul><li>IO设备状态向主机报告的信号线</li><li>查询设备是否已经正常连接并就绪</li><li>查询设备是否被占用</li></ul></li><li>命令线<ul><li>CPU向设备发送命令的信号线</li><li>发送读写信号</li><li>发送启动停止信号</li></ul></li><li>设备选择线<ul><li>主机选择IO设备进行操作的信号线</li><li>对连在总线上的设备进行选择</li></ul></li></ul></li><li><p>CPU与IO设备的通信</p><p><em><strong>CPU速度与IO设备速度不一致</strong></em></p><ul><li><p>程序中断</p><ul><li>当外围IO设备就绪时，向CPU发出中断信号</li><li>CPU有专门的电路响应中断信号</li><li><em><strong>提供低速设备通知CPU的一种异步方式，CPU可以高速运转同时兼顾低速设备的响应</strong></em></li></ul></li><li><p>DMA（Directed Memory Access直接存储器访问）</p><img src="..\计算机入门（计组-计网-操作系统）\DMA.PNG"/><ul><li>DMA直接连接主存与IO设备</li><li>DMA工作时不需要CPU的参与</li><li>硬盘和外置显卡都有DMA设备</li></ul></li></ul></li></ol><p>两者的比较：程序中断由程序控制，CPU有一个程序的切换与保存的过程，但DMA直接硬件控制，CPU只需要做些预处理和后处理的工作即可；程序中断应用于低速外设，而DMA用于高速外设。</p><h3 id="计算机的存储器"><a href="#计算机的存储器" class="headerlink" title="计算机的存储器"></a>计算机的存储器</h3><h4 id="计算机的存储器概览"><a href="#计算机的存储器概览" class="headerlink" title="计算机的存储器概览"></a>计算机的存储器概览</h4><ol><li><p>存储器的分类</p><ul><li>存储介质分类<ul><li>半导体存储器：内存、U盘、固态硬盘</li><li>磁存储器：磁带、磁盘</li></ul></li><li>光存储器：光盘</li><li>存取方式分类<ul><li><p>随机存储器（RAM）：随机读取、与位置无关</p></li><li><p>串行存储器：与位置有关、按顺序查找</p></li><li><p>只读存储器（ROM）：只读不写</p><img src="..\计算机入门（计组-计网-操作系统）\半导体存储器.PNG"/></li></ul></li></ul></li><li><p>存储器的层次结构</p><p>选购存储器时考虑哪些因素？</p><p>读写速度（5400转、7200转）、存储容量（2T、128G）、价格</p><p>容量+价格——&gt;位价：每比特位价格</p><p>存储器的层次结构：</p><img src="..\计算机入门（计组-计网-操作系统）\存储器的层次结构.PNG"/><img src="..\计算机入门（计组-计网-操作系统）\存储器的层次结构2.PNG"/><img src="..\计算机入门（计组-计网-操作系统）\存储器的层次结构3.PNG"/><p><strong>在主存与辅存层次的不断发展当中，也逐渐形成了虚拟存储系统，程序员编程的地址与虚存的地址是相对应的，所以我们编程时所用的空间要远远大于主存空间。</strong></p><ul><li><p>缓存-主存层次</p><p>原理：局部性原理</p><ul><li>局部性原理是指CPU访问存储器时，无论是存取指令还是存取数据，所访问的存储单元都趋于聚集在一个较小的连续区域中。（程序经常访问的一段内存会被置换到缓存，CPU在需要这段内容时直接访问缓存即可）</li></ul><p>实现：在CPU与主存之间增加一层速度快（容量小）的cache</p><p>目的：解决主存速度不足的问题，解决CPU与主存的速度不匹配问题</p></li><li><p>主存-辅存层次</p><p>原理：局部性原理</p><p>实现：主存之外增加辅助存储器（磁盘、SD卡、U盘等）</p><p>目的：解决主存容量不足的问题（大型游戏）</p></li></ul></li></ol><h4 id="计算机的主存储器与辅助存储器"><a href="#计算机的主存储器与辅助存储器" class="headerlink" title="计算机的主存储器与辅助存储器"></a>计算机的主存储器与辅助存储器</h4><p>引入：为什么计算机断电时，内存数据丢失，而磁盘数据不会丢失呢？</p><ul><li><p>主存储器——内存</p><ul><li><p>RAM（Random Access Memory）</p></li><li><p>RAM通过电容存储数据，必须隔一段时间刷新一次</p></li><li><p>如果掉电，那么一段时间后将丢失所有数据</p></li><li><p>CPU与内存交互如图所示：</p><img src="..\计算机入门（计组-计网-操作系统）\CPU内存交互.PNG"/></li><li><p>32位系统（地址总线32位）2^32^=4*2^30^=4G,32位系统可以表示4G个不同的地址，每个地址表示1Byte的位置。</p></li><li><p>64位系统（地址总线64位）2^64^=2^34^*2^30^=2^34^G</p></li></ul></li><li><p>辅助存储器——磁盘</p><ul><li><p>表面是可磁化的硬磁特性材料</p></li><li><p>移动磁头径向运动读取磁道信息</p></li><li><p>磁盘调度算法</p><p>如图所示：磁头位于第4个磁道</p><img src="..\计算机入门（计组-计网-操作系统）\磁盘.png"/><ul><li><p>先来先服务算法</p><p>按顺序进行读取：1-&gt;4-&gt;2-&gt;3-&gt;1-&gt;5</p></li><li><p>最短寻道时间优先算法</p><ul><li>与磁头当前位置有关</li><li>优先访问离磁头最近的磁道</li></ul><p>读取顺序：4-&gt;5-&gt;3-&gt;2-&gt;1-&gt;1</p></li><li><p>扫描算法（电梯算法）</p><ul><li>每次只往一个方向移动</li><li>到达一个方向需要服务的尽头再反方向移动</li></ul><p>读取顺序：4-&gt;3-&gt;2-&gt;1-&gt;1-&gt;5</p></li><li><p>循环扫描算法</p><ul><li>只往一个方向读取，由内往外读取或由外往内读取</li></ul><p>读取顺序：4-&gt;5-&gt;1-&gt;1-&gt;2-&gt;3</p></li></ul></li></ul></li></ul><h4 id="计算机的高速存储器"><a href="#计算机的高速存储器" class="headerlink" title="计算机的高速存储器"></a>计算机的高速存储器</h4><ul><li><p>高速缓存的工作原理</p><p><strong>字</strong>：指存放在一个存储单元中的二进制代码组合</p><p><strong>字块</strong>：指存储在连续的存储单元中而被看作是一个单元的一组字</p><img src="..\计算机入门（计组-计网-操作系统）\字与字块.png"/><p>字的地址包含两个部分，前<strong>m</strong>位指定字块的地址，后<strong>b</strong>位指定字在字块中的地址</p><p>一个字有32位，一个字块共有<strong>B</strong>个字，主存共<strong>M</strong>个字块</p><p>则有<strong>2^m=M, 2^b=B</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">例子：假设主存用户空间容量位4G，字块大小为4M，字长为32位，则对于字地址中的块地址m和块内地址b的位数，至少应该是多少？</span></span><br><span class="line"><span class="comment">答：先确认有多少个字块，每个字块里面有多少个字</span></span><br><span class="line"><span class="comment">字块数：4GB=2^32B, 4MB=2^22B, 则有2^10个字块，m=10,则m&gt;=10</span></span><br><span class="line"><span class="comment">每个字块内的字数：4M=2^22B= 2^25bits， 32位=2^5bits，b=20,则b&gt;=20</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>缓存与主存的存储的逻辑结构类似</li><li>缓存的容量较小</li><li>缓存的速度更快</li></ul><p>那么缓存是如何工作的呢？如何评价缓存工作的状况呢？</p><p>当CPU需要的数据在缓存那里时，直接从缓存拿即可，当需要的数据不在缓存时，CPU需要到主存里面去拿。对于缓存而言，这就产生了一个<strong>命中率h</strong>的概念。</p><ul><li>命中率是衡量缓存的重要性能指标</li><li>理论上CPU每次都能从高速缓存存取数据时，命中率为1</li><li>假设访问主存次数：N<del>m</del> ，访问Cache次数：N<del>c</del> ,则命中率h=N<del>c</del> /(N<del>c</del> +N<del>m</del>)。</li><li>对于缓存而言，由命中率的概念进一步得到了一个<strong>访问效率e</strong>的概念。</li><li>访问主存时间：t<del>m</del> ，访问缓存时间：t<del>c</del> ，访问Cache-主存系统平均时间：t<del>a</del> = ht<del>c</del> + (1-h)t<del>m</del> ；</li><li>访问效率e = t<del>c</del>/t<del>a</del> = t<del>c</del>/[ht<del>c</del>+(1-h)t<del>m</del>] </li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">例子：假设CPU在执行某段程序时，共访问Cache2000次，访问主存50次，已知已知Cache的存取时间为50ns，主存的存取时间为200ns，求Cache主存系统的命中率、访问效率和平均访问时间。</span></span><br><span class="line"><span class="comment">命中率h=命中次数/（命中次数hc+没有命中次数hm）=2000/(2000+50)约等于0.976</span></span><br><span class="line"><span class="comment">平均访问时间ta=h*tc+(1-h)tm=0.976*50ns+0.024*200ns=53.6ns</span></span><br><span class="line"><span class="comment">访问效率e=访问Cache时间/平均访问时间ta=50/53.6=93.28%</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>如何有效地提高Cache的命中率和访问效率呢？这就需要性能良好的缓存替换策略了。</p></li><li><p>高速缓存的替换策略</p><p>高速缓存的替换发生在什么样的场景下呢？</p><p>当CPU未能在高速缓存中找到数据，此时就需要从主存中载入所需的数据了，此时便是高速缓存的替换时机。</p><ul><li><p>随机算法</p><p>每次需要替换时，随机选取高速缓存里的位置，把需要的数据替换到该位置。</p></li><li><p>先进先出算法（FIFO）</p><ul><li>把高速缓存看做是一个先进先出的队列</li><li>优先替换最先进入队列的字块</li></ul></li><li><p>最不经常使用算法（LFU）</p><ul><li><p>优先淘汰最不经常使用的字块</p></li><li><p>需要额外的空间记录字块的使用频率</p></li><li><p>LFU图解：</p><img src="..\计算机入门（计组-计网-操作系统）\LFU图解.png"/></li></ul></li><li><p>最近最少使用算法（LRU）</p><ul><li><p>优先淘汰一段时间内没有使用的字块</p></li><li><p>有多种实现方法，一般使用双向链表</p></li><li><p>把当前访问节点置于链表前面（保证链表头部节点是最近使用的）</p></li><li><p>最近最少使用算法图解：</p><img src="..\计算机入门（计组-计网-操作系统）\LRU.png"/></li></ul></li></ul></li></ul><h3 id="计算机的CPU"><a href="#计算机的CPU" class="headerlink" title="计算机的CPU"></a>计算机的CPU</h3><h4 id="计算机的指令系统"><a href="#计算机的指令系统" class="headerlink" title="计算机的指令系统"></a>计算机的指令系统</h4><ul><li><p>机器指令的形式</p><ul><li><p>机器指令主要由两部分组成：操作码、地址码</p></li><li><p>操作码指明指令所要完成的操作</p></li><li><p>操作码的位数反映了机器的操作类型，假设操作码有8位，则会有2^8=256种操作种类</p></li><li><p>地址码直接给出操作数或者操作数的地址</p></li><li><p>分三地址码指令、二地址码指令和一地址码指令</p><ul><li><p>三地址指令：|操作码（OP）|addr1|addr2|addr3|</p><p>即(addr1)OP(addr2)-&gt;(addr3)    例：加法操作</p></li><li><p>二地址指令：|操作码（OP）|addr1|addr2|</p><p>即(addr1)OP(addr2)-&gt;(addr1) 或(addr2)</p></li><li><p>一地址指令：|操作码（OP）|addr1|</p><p>即(addr1)OP-&gt;(addr1) 或(addr1)OP(ACC)-&gt;(addr1)</p></li><li><p>零地址指令：</p><ul><li>在机器指令中无地址码（无敌芝麻😂😂😂）</li><li>空操作、停机操作、中断返回操作等</li></ul></li></ul></li></ul></li><li><p>机器指令的操作类型</p><ul><li><p>数据传输</p><ul><li>数据传输发生在哪里：在寄存器之间、寄存器与存储单元、存储单元之间传送</li><li>数据传输类型的操作：数据读写、交换地址数据、清零置一等操作</li></ul></li><li><p>算数逻辑操作</p><ul><li>操作数之间的加减乘除运算</li><li>操作数的与或非等逻辑位运算</li></ul></li><li><p>移位操作</p><ul><li>数据左移（乘2）、数据右移（除2）</li><li>完成数据在算术逻辑单元的必要操作</li></ul></li><li><p>控制指令</p><ul><li>等待指令、停机指令、空操作指令、中断指令等</li></ul></li></ul></li><li><p>机器指令的寻址方式</p><ul><li><p>指令寻址</p><ul><li>顺序寻址</li><li>跳跃寻址</li></ul></li><li><p>数据寻址</p><ul><li>立即寻址<ul><li>|操作码（OP）|addr1|<strong>6</strong>|    </li><li>指令直接获得操作数</li><li>无需访问存储器</li></ul></li><li>直接寻址<ul><li>|操作码（OP）|<strong>addr1</strong>|6|    </li><li>直接给出操作数在主存的地址</li><li>寻找操作数简单，无需计算数据地址</li></ul></li><li>间接寻址<ul><li>|操作码（OP）|R1|<strong>addr2</strong>|    </li><li>指令地址码给出的是操作数地址的地址</li><li>需要访问一次或多次主存来获取操作数</li></ul></li></ul></li></ul><table><thead><tr><th align="center">寻址方式</th><th align="center">优点</th><th align="center">缺点</th></tr></thead><tbody><tr><td align="center">立即寻址</td><td align="center">速度快</td><td align="center"><em>地址码位数限制操作数表示范围</em></td></tr><tr><td align="center">直接寻址</td><td align="center">寻找操作数简单</td><td align="center"><em>地址码位数限制操作数表示范围</em></td></tr><tr><td align="center">间接寻址</td><td align="center">操作数寻址范围大</td><td align="center">速度较慢</td></tr></tbody></table></li></ul><h4 id="计算机的控制器"><a href="#计算机的控制器" class="headerlink" title="计算机的控制器"></a>计算机的控制器</h4><p>控制器是协调和控制计算机运行的，控制器是由程序计数器、时序发生器、指令译码器、各种寄存器以及总线组成的。</p><ul><li><p>程序计数器</p><ul><li>程序计数器用来存储下一条指令的地址</li><li>CPU循环从程序计数器中拿出指令</li><li>当指令被拿出时，指向下一条指令</li></ul></li><li><p>时序发生器</p><ul><li>电气工程领域，用于发送时序脉冲</li><li>CPU依据不同的时序脉冲有节奏的进行工作</li></ul></li><li><p>指令译码器</p><ul><li>指令译码器是控制器的主要部件之一</li><li>计算机指令由操作码和地址码组成</li><li>翻译操作码对应的操作以及控制传输地址码对应的数据</li></ul></li><li><p>各种寄存器</p><ul><li>指令寄存器<ul><li>指令寄存器也是控制器的主要部件之一</li><li>从主存或高速缓存存取计算机指令</li></ul></li><li>主存地址寄存器<ul><li>保存当前CPU正要访问的内存单元的地址</li></ul></li><li>主存数据寄存器<ul><li>保存当前CPU正要读或写的主存数据</li></ul></li><li>通用寄存器<ul><li>用于暂时存放或传送数据或指令</li><li>可保存ALU的运算中间结果</li><li>容量比一般专用寄存器要大</li></ul></li></ul></li><li><p>总线</p></li></ul><h4 id="计算机的运算器"><a href="#计算机的运算器" class="headerlink" title="计算机的运算器"></a>计算机的运算器</h4><p>运算器是用来进行数据运算加工的，运算器是由数据缓存器、ALU、通用寄存器、状态字寄存器以及总线组成的</p><ul><li><p>数据缓冲器</p><ul><li>分为输入缓冲和输出缓冲</li><li>输入缓冲暂时存放外设送过来的数据</li><li>输出缓冲暂时存放送往外设的数据</li></ul></li><li><p>ALU</p><ul><li><p>ALU：算术逻辑单元，是运算器的主要组成</p></li><li><p>常见的位运算（左右移、与或非等）</p></li><li><p>算术运算（加减乘除等）</p></li><li><p>ALU图解：</p><img src="..\计算机入门（计组-计网-操作系统）\ALU.png"/></li></ul></li><li><p>通用寄存器</p><ul><li>用于暂时存放或传送数据或指令</li><li>可保存ALU的运算中间结果</li><li>容量比一般专用寄存器要大</li></ul></li><li><p>状态字寄存器</p><ul><li>存放运算状态（条件码、进位、溢出、结果正负等）</li><li>存放运算控制信息（调试跟踪标记位、允许中断位等）</li></ul></li><li><p>总线</p></li></ul><h4 id="指令执行过程"><a href="#指令执行过程" class="headerlink" title="指令执行过程"></a>指令执行过程</h4><ul><li><p>指令执行过程</p><p>取指令——&gt;分析指令——&gt;执行指令</p><img src="..\计算机入门（计组-计网-操作系统）\指令执行.png"/></li></ul><p>​        图解分析：</p><blockquote><p>程序计数器拿到第一条指令的地址101，然后通过总线拿到101地址里的内容，将其放入指令寄存器中缓存起来，指令寄存器并不能理解指令的意思，再将指令寄存器中的内容传送给指令译码器；此时程序计数器加1，变为102；指令译码器理解MOV R0,R1的意思：将R0寄存器的数据移动R1中去；理解后，指令译码器发出控制信号；控制信号通过片内总线到达运算器中；此时运算器会将R0(100)里的内容经过ALU通过总线，送到数据缓存器中，同时将R0(100)覆盖R1(100),到此地址101中的指令完成；接着从程序计数器中拿出102的指令开始执行。</p></blockquote><p>​        指令执行过程：</p><p>​        <img src="..\计算机入门（计组-计网-操作系统）\指令执行过程.png"/></p><p>小结：在计算机指令执行的过程中，取指令和分析指令是由控制器来工作的，在执行指令时，是由运算器在工作的，也就是说，控制器和运算器不能同时工作，从而导致CPU的综合利用率不高；影刺我们需要改变执行的执行过程，来提高CPU的综合利用率。</p><ul><li><p>CPU的流水线设计</p><ul><li><p>类似工厂的装配线</p></li><li><p>工厂的装配线是的多个产品可以同时被加工</p></li><li><p>在同一时刻，不同产品均位于不同的加工阶段</p><img src="..\计算机入门（计组-计网-操作系统）\CPU的流水线设计.png"/></li></ul></li></ul><h2 id="计算篇"><a href="#计算篇" class="headerlink" title="计算篇"></a>计算篇</h2><h3 id="进制运算的基本知识"><a href="#进制运算的基本知识" class="headerlink" title="进制运算的基本知识"></a>进制运算的基本知识</h3><h4 id="进制运算的基础"><a href="#进制运算的基础" class="headerlink" title="进制运算的基础"></a>进制运算的基础</h4><ul><li><p>进制的概述</p><ul><li>进位制是一种计数方式，亦称进位计数法或位值计数法</li><li>有限种数字符号来表示无限的数值</li><li>使用的数字符号的数目称为这种进位制的基数或底数</li><li>计算机喜欢二进制，但二进制表达太长了</li><li>使用大进制可以解决这个问题</li><li>八进制、十六进制满足2的n次方的要求</li></ul><p>几进制的话，顾名思义，到达几种不同的数就进一位</p></li><li><p>二进制运算的基础</p><img src="..\计算机入门（计组-计网-操作系统）\二进制的基础.png"/><p>按权展开法(整数的二进制转化为十进制)：N=0b101=1*2^2^ + 0 *2^1^ + 1 *2^0^ = 5</p><p>重复相除法（整数的十进制转化位二进制）</p><p>小数的按权展开法</p><p>小数的重复相除法</p></li></ul><h3 id="二进制数据的表示方法"><a href="#二进制数据的表示方法" class="headerlink" title="二进制数据的表示方法"></a>二进制数据的表示方法</h3><h4 id="有符号数与无符号数"><a href="#有符号数与无符号数" class="headerlink" title="有符号数与无符号数"></a>有符号数与无符号数</h4><ul><li><p>使用0表示正数，使用1表示负数：+237=011101101；-237=111101101</p></li><li><p>怎么判断他是数字位还是符号位呢？符号位放到数字位的最前面</p></li><li><p>原码表示法：</p><ul><li>使用0表示正数，1表示负数</li><li>规定符号位位于数值第一位</li><li>表达简单明了，是人类最容易理解的表示法</li><li>原码表示法的问题：<ul><li>0有两种表示方法：00、10</li><li>原码进行运算非常复杂，特别是两个操作数符号不同的时候<ul><li>判断两个操作数绝对值大小</li><li>使用绝对值大的书减去绝对值小的数</li><li>对于符号值，以绝对值大的为准</li></ul></li></ul></li></ul><p>希望找到不同符号操作数更加简单的运算方法</p><p>希望找到使用正数代替负数的方法</p><p>使用加法操作代替减法操作，从而消除减法</p></li></ul><h4 id="二进制的补码表示法"><a href="#二进制的补码表示法" class="headerlink" title="二进制的补码表示法"></a>二进制的补码表示法</h4><p>补码与原码的关系：</p><img src="..\计算机入门（计组-计网-操作系统）\补码.png"/><p>套用公式并没有解决使用减法的问题</p><h4 id="二进制的反码表示法"><a href="#二进制的反码表示法" class="headerlink" title="二进制的反码表示法"></a>二进制的反码表示法</h4><p>引进补码的目的：</p><ul><li>减法运算复杂，希望找到使用正数代替负数的方法</li><li>使用加法代替减法操作，从而消除减法</li><li><strong>但计算补码的过程中，还是使用了减法！！！</strong></li></ul><p>反码定义：</p><img src="..\计算机入门（计组-计网-操作系统）\反码定义.png"/><p>引进反码解决减法问题。</p><h4 id="小数的二进制补码表示"><a href="#小数的二进制补码表示" class="headerlink" title="小数的二进制补码表示"></a>小数的二进制补码表示</h4><p>小数的原补反和正数一样</p><p>负数的反码等于原码除符号位按位取反</p><p>负数的补码等于反码+1</p><h3 id="二进制数据的运算"><a href="#二进制数据的运算" class="headerlink" title="二进制数据的运算"></a>二进制数据的运算</h3><h4 id="定点数与浮点数"><a href="#定点数与浮点数" class="headerlink" title="定点数与浮点数"></a>定点数与浮点数</h4><ul><li><p>定点数的表示方法</p><ul><li>小数点固定在某个位置的数称为定点数</li></ul></li><li><p>浮点数的表示方法</p><ul><li><p>为什么要有浮点数呢？</p><ul><li>计算机处的很大程度上不是纯小数或纯正数</li><li>数据范围很大，定点数难以表达</li></ul></li><li><p>浮点数的表示格式</p><img src="..\计算机入门（计组-计网-操作系统）\浮点数的表示格式.png"/></li><li><p>浮点数的表示范围</p><p>假设阶码数值取m位，尾数数值取n位</p><p>阶码的表示范围：[-(2^m^ - 1)，2^m^ - 1]</p><p>尾数能够表示的最大值：1-2^(-n)</p><p>尾数能够表示的最小值：2^(-n)</p><p>尾数表示范围：[2^(-n), 1-2^(-n)]</p><img src="..\计算机入门（计组-计网-操作系统）\浮点数的表示范围.png"/><p>单精度浮点数：使用4字节、32位来表达浮点数（float）</p><p>双精度浮点数：使用8字节、64位表达浮点数（double）</p></li><li><p>浮点数的规格化</p><p>尾数规定使用纯小数</p><p>尾数最高位必须是1 </p><img src="..\计算机入门（计组-计网-操作系统）\浮点数例题.png"/></li></ul></li><li><p>定点数与浮点数的对比</p><ul><li>当定点数与浮点数位数相同时，浮点数表示的范围更大</li><li>当浮点数尾数为规格化数时，浮点数的精度更高</li><li>浮点数运算包含阶码和尾数，浮点数的运算更加复杂</li><li>浮点数在数的表示范围、精度、溢出处理、编程等方面均优于定点数</li><li>浮点数在数的运算规则、运算速度、硬件成本方面不如定点数</li></ul></li></ul><h4 id="定点数的加减法运算"><a href="#定点数的加减法运算" class="headerlink" title="定点数的加减法运算"></a>定点数的加减法运算</h4><p>整数加法：A[补]+B[补] = [A+B] [补]（mod2^(n+1)）</p><p>小数加法：A[补]+B[补] = [A+B] [补]（mod2）</p><p>数值位与符号位一同运算，并将符号位产生的进位自然丢掉</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">例1：A=-110010，B=001101，求A+B</span></span><br><span class="line"><span class="comment">A[补] = 1,001110</span></span><br><span class="line"><span class="comment">B[补] = 0,001101</span></span><br><span class="line"><span class="comment">(A+B)[补] = 1,011011</span></span><br><span class="line"><span class="comment">A+B = -100101</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">例2：A=-1010000，B=-1110000，求A+B</span></span><br><span class="line"><span class="comment">A[补] = 1,0110000</span></span><br><span class="line"><span class="comment">B[补] = 1,0010000</span></span><br><span class="line"><span class="comment">(A+B)[补] = 0,1000000</span></span><br><span class="line"><span class="comment">A+B = 0,1000000</span></span><br><span class="line"><span class="comment">发生溢出</span></span><br><span class="line"><span class="comment">1byte的数值范围[-128~127]</span></span><br><span class="line"><span class="comment">问：-128为什么可以用1000 0000表示？（规定）</span></span><br><span class="line"><span class="comment">   这里我分析的是byte，它就8位。在无符号位的二进制中128的表示为1000 0000。有符号位的情况下byte好像无法表示+128或-128。</span></span><br><span class="line"><span class="comment">   如果我们假设现在byte不是占用8位，而是9位，最高位是符号位。那么-128就能够是1 1000 0000，其补码也是1 1000 0000，很神奇吧，一样的。-128的补码尾八位就是1000 0000。那就规定【1000 0000是-128的补码，且-128是没有原码和反码的，即不能利用1000 0000反推其原码和反码】。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>判断溢出：</p><ul><li><p>双符号位判断法</p><p>单符号位表示变为双符号位：0=&gt;00，1=&gt;11</p><p>双符号位产生的进位丢弃</p><p><strong>结果的双符号位不同则表示溢出</strong></p></li></ul><p>整数减法：A[补]-B[补] = A[补]+(-B[补]) = [A+(-B)] [补]（mod2^(n+1)）</p><p>小数减法：A[补]-B[补] = A[补]+(-B[补]) =  [A+(-B)] [补]（mod2）</p><p><strong>对于-B[补]，换一下B[补]的符号即可</strong></p><h4 id="浮点数的加减法运算"><a href="#浮点数的加减法运算" class="headerlink" title="浮点数的加减法运算"></a>浮点数的加减法运算</h4><p><strong>对阶——&gt;尾数求和——&gt;尾数规格化——&gt;舍入——&gt;溢出判断</strong></p><ul><li><p>对阶</p><ul><li><p>对阶的目的就是使得两个浮点数阶码一致，使得尾数可以进行运算</p></li><li><p>浮点数尾数运算简单，浮点数位数实际小数位与阶码有关</p></li><li><p>阶码按小阶看齐大阶的原则</p><img src="..\计算机入门（计组-计网-操作系统）\浮点数对阶.png"/></li></ul></li><li><p>尾数求和</p><ul><li><p>使用补码进行运算</p></li><li><p>减法运算转化为加法运算：A-B = A+(-B)</p><img src="..\计算机入门（计组-计网-操作系统）\浮点数尾数求和.png"/></li></ul></li><li><p>尾数规格化</p><ul><li><p>对补码进行规格化需要判断两种情况：S&gt;0和S&lt;0</p><ul><li>S[补] = <strong>00.1</strong>xxxxxxx(S&gt;0)</li><li>S[补] = <strong>11.0</strong>xxxxxxx(S&lt;0)</li></ul></li><li><p>如果不满足此格式（<strong>符号位与最高位不一致</strong>），需要进行左移，同时阶码相应变化，以满足规格化</p><img src="..\计算机入门（计组-计网-操作系统）\浮点数尾数规格化.png"/></li><li><p>尾数规格化右移</p><ul><li>一般情况下都是左移</li><li>双符号位不一致下需要右移（定点运算的溢出情况）</li><li>右移的话则需要进行舍入操作</li></ul></li></ul></li><li><p>舍入</p><ul><li>“0舍1入”法（二进制的四舍五入）</li></ul><img src="..\计算机入门（计组-计网-操作系统）\浮点数舍入.png"/><p>​        尾数两次右移，记得阶码+2：</p><img src="..\计算机入门（计组-计网-操作系统）\浮点数舍入2.png"/></li><li><p>溢出判断</p><ul><li>定点数运算双符号位不一致为溢出</li><li>浮点运算尾数双符号位不一致不算溢出，因为位数双符号位可以进行右规</li><li>浮点数运算主要通过阶码的双符号位判断是否溢出</li><li>如果规格化后，阶码双符号位不一致，则认为是溢出</li></ul></li></ul><h4 id="浮点数的乘除法运算（了解）"><a href="#浮点数的乘除法运算（了解）" class="headerlink" title="浮点数的乘除法运算（了解）"></a>浮点数的乘除法运算（了解）</h4><img src="..\计算机入门（计组-计网-操作系统）\浮点数乘除法.png"/><img src="..\计算机入门（计组-计网-操作系统）\浮点数乘除法2.png"/><p>阶码运算——&gt;尾数运算——&gt;尾数规格化——&gt;舍入——&gt;溢出判断</p><h2 id="综合实践"><a href="#综合实践" class="headerlink" title="综合实践"></a>综合实践</h2><p>实践内容：实现双向链表——&gt;实现置换算法（先进先出算法、最近最少使用算法、最不经常使用算法）</p><p>实现双线链表：实现Node类——&gt;实现DoubleLinkedList类（pop()方法、append(node)方法、append_front(node)方法、remove(node)方法）</p><p>实现置换算法：实现Cache类（get(key)方法：返回value或-1）、put(key,value)方法</p><h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="概述篇-1"><a href="#概述篇-1" class="headerlink" title="概述篇"></a>概述篇</h2><h3 id="什么是计算机网络"><a href="#什么是计算机网络" class="headerlink" title="什么是计算机网络"></a>什么是计算机网络</h3><h3 id="计算机网络的分类"><a href="#计算机网络的分类" class="headerlink" title="计算机网络的分类"></a>计算机网络的分类</h3><h3 id="本章内容概览"><a href="#本章内容概览" class="headerlink" title="本章内容概览"></a>本章内容概览</h3><h2 id="网络层篇"><a href="#网络层篇" class="headerlink" title="网络层篇"></a>网络层篇</h2><h3 id="网络层IP协议相关"><a href="#网络层IP协议相关" class="headerlink" title="网络层IP协议相关"></a>网络层IP协议相关</h3><h4 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h4><h4 id="子网划分"><a href="#子网划分" class="headerlink" title="子网划分"></a>子网划分</h4><h4 id="简单路由"><a href="#简单路由" class="headerlink" title="简单路由"></a>简单路由</h4><h3 id="网络层其他协议"><a href="#网络层其他协议" class="headerlink" title="网络层其他协议"></a>网络层其他协议</h3><h4 id="ARP协议与RARP协议"><a href="#ARP协议与RARP协议" class="headerlink" title="ARP协议与RARP协议"></a>ARP协议与RARP协议</h4><h4 id="ICMP协议"><a href="#ICMP协议" class="headerlink" title="ICMP协议"></a>ICMP协议</h4><h3 id="IP的路由算法"><a href="#IP的路由算法" class="headerlink" title="IP的路由算法"></a>IP的路由算法</h3><h4 id="路由的概述"><a href="#路由的概述" class="headerlink" title="路由的概述"></a>路由的概述</h4><h4 id="内部网关路由协议"><a href="#内部网关路由协议" class="headerlink" title="内部网关路由协议"></a>内部网关路由协议</h4><h4 id="外部网关路由协议"><a href="#外部网关路由协议" class="headerlink" title="外部网关路由协议"></a>外部网关路由协议</h4><h2 id="传输层篇"><a href="#传输层篇" class="headerlink" title="传输层篇"></a>传输层篇</h2><h2 id="应用层篇"><a href="#应用层篇" class="headerlink" title="应用层篇"></a>应用层篇</h2><h2 id="综合实践-1"><a href="#综合实践-1" class="headerlink" title="综合实践"></a>综合实践</h2><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><hr><p>操作系统的演进：</p><ol><li>无操作系统<ul><li>人工操作</li><li>用户独占</li><li>CPU等待人工操作</li><li><strong>资源利用率低</strong></li></ul></li><li>批处理系统<ul><li>无需等待人工操作</li><li>批量输入任务</li><li><strong>资源利用率提升</strong></li><li><strong>多道程序设计</strong></li></ul></li><li>分时系统<ul><li>人机交互</li><li>多用户共享</li><li><strong>及时调试程序</strong></li><li><strong>资源利用率提升</strong></li></ul></li></ol><hr><p>多道程序设计：</p><ul><li>早期批处理系统只能一次处理一个任务</li><li>多道程序设计使得批处理系统可以一次处理多个任务</li><li>多道程序设计是指在计算机内存中同时存放多个程序</li><li>多道程序在计算机的管理程序之下相互穿插运行</li><li><strong>对多道程序的管理是操作系统的重要功能</strong><ul><li>进程管理</li><li>存储管理</li><li>作业管理</li><li>文件管理</li><li>设备管理</li></ul></li></ul><hr><h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><h3 id="操作系统概览"><a href="#操作系统概览" class="headerlink" title="操作系统概览"></a>操作系统概览</h3><ol><li><p>What&amp;Why</p><p>操作系统是什么？</p><ul><li><p>操作系统是管理计算机硬件和软件资源的<strong>计算机程序</strong></p></li><li><p>管理配置内存、决定资源供需顺序、控制输入输出设备等</p></li><li><p>操作系统提供让用户和系统交互的操作界面</p></li><li><p>操作系统的种类是多种多样的，不局限于计算机</p></li><li><p>从手机到超级计算机，操作系统可简单也可复杂</p></li><li><p>在不同的设备上，操作系统可想用户呈现多种操作手段</p></li><li><p>手机的操作系统：Android（MIUI、ColorOS、Flyme）、iOS、华为“鸿蒙”？</p></li><li><p>常见的计算机操作系统：Windows、Linux（Centos、Ubuntu）、MacOS</p><p><strong>管理硬件、提供用户交互的软件系统</strong></p></li></ul><p>为什么需要操作系统？</p><ul><li>我们不可能直接操作计算机硬件</li><li>设备种类繁多复杂，需要统一界面</li><li>操作系统的简易性使得更多人能够使用计算机</li></ul></li><li><p>操作系统的基本功能</p><img src="..\计算机入门（计组-计网-操作系统）\操作系统的资源管理.png"/><ul><li><p><strong>操作系统统一管理着计算机资源（处理器资源、存储器资源、IO设备资源、文件资源）</strong></p></li><li><p>用户无需面向硬件接口编程</p></li><li><p>IO设备管理软件：提供读写接口</p></li><li><p>文件管理软件：提供操作文件接口</p></li><li><p><strong>操作系统实现了对计算机资源的抽象</strong></p></li><li><p><strong>操作系统提供了用户于计算机之间的接口（图像窗口形式、命令模式、系统调用模式[编程的形式]）</strong></p><img src="..\计算机入门（计组-计网-操作系统）\操作系统的基本功能.png"/></li></ul></li><li><p>操作系统相关概念</p><ul><li><p>并发性</p><ul><li><p>并行VS并发</p><ul><li><p>并行是指两个或多个事件可以在<strong>同一时刻</strong>发生</p></li><li><p>并发是指两个或多个事件可以在<strong>同一时间间隔</strong>发生</p><img src="..\计算机入门（计组-计网-操作系统）\并发与并行.png"/></li></ul></li></ul></li><li><p>共享性</p><ul><li><p>共享性表现为操作系统中的资源可供多个并发的程序共同使用</p></li><li><p>这种共同使用的形式称之为资源共享</p><img src="..\计算机入门（计组-计网-操作系统）\操作系统的共享性.png"/></li><li><p>互斥共享形式（打印机）</p><ul><li>当资源被程序A占用时，其他想使用的话只能等待</li><li>只能进程A使用完以后，其他进程才可以使用该资源</li></ul></li><li><p>同时访问形式</p><ul><li>某种资源在一段时间<strong>并发地</strong>被多个程序访问</li><li>这种“同时”是宏观的，从宏观去看该资源可以被同时访问</li></ul></li></ul></li><li><p>虚拟性</p><ul><li><p>虚拟性表现为把一个物理实体转变为若干个逻辑实体</p></li><li><p>物理实体是真实存在的，逻辑实体是虚拟的</p></li><li><p>虚拟的技术主要有<strong>时分复用技术</strong>和<strong>空分复用技术</strong></p></li><li><p><strong>时分复用技术</strong></p><ul><li><p>资源在时间上进行复用，不同程序并发使用</p></li><li><p>多道程序分时使用计算机的硬件资源</p></li><li><p>提供资源的利用率</p></li><li><p>虚拟处理器技术</p><ul><li>借助多道程序设计技术</li><li>为每个程序建立进程</li><li>多个程序分时复用处理器</li></ul></li><li><p>虚拟设备技术</p><ul><li>物理设备虚拟为多个逻辑设备</li><li>每个程序占用一个逻辑设备</li><li>多个程序通过逻辑设备并发访问</li></ul></li></ul></li><li><p><strong>空分复用技术</strong></p><ul><li><p>空分复用技术用来实现虚拟磁盘、虚拟内存等</p></li><li><p>提升资源的利用率，提升编程效率</p></li><li><p>虚拟磁盘技术</p><ul><li>物理磁盘虚拟为逻辑磁盘</li><li>C、D、E等逻辑盘</li><li>使用起来更加安全、方便</li></ul></li><li><p>虚拟内存技术</p><ul><li>在逻辑上扩大程序的存储容量</li><li>使用比实际内存更大的容量</li><li>大大提升编程效率</li></ul></li></ul></li></ul></li><li><p>异步性</p><ul><li><p>在多道程序环境下，允许多个进程并发执行</p></li><li><p>进程在使用资源时可能需要等待或放弃</p></li><li><p>进程的执行并不是一气呵成的，而是以走走停停的形式推进</p><img src="..\计算机入门（计组-计网-操作系统）\操作系统的异步性.png"/></li></ul></li></ul></li></ol><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><ol><li><p>进程管理之进程实体</p><ul><li><p>为什么需要进程</p><ul><li>没有配置OS之前，资源属于当前运行的程序</li><li>配置OS之后，引入<strong>多道程序设计</strong>的概念</li><li>合理的隔离资源、运行环境，提升资源利用率</li><li><strong>进程是系统进行资源分配和调度的基本单位</strong></li><li>进程作为程序独立运行的载体 ，保障程序正常执行</li><li>进程的存在使得操作系统资源的利用率大幅提升</li></ul></li><li><p>进程的实体</p><ul><li><p>主存中的进程形态</p><p>在主存中进程也是一段连续存储的空间，该空间称为进程控制块（PCB）</p><img src="..\计算机入门（计组-计网-操作系统）\进程控制块.png"/><p><strong>标识符</strong>：标识符唯一标记一个进程，用于区别其他进程</p><p><strong>状态</strong>：标记进程的进程状态，如：运行态</p><p>程序计数器：进程即将被执行的下一条指令的地址</p><p>内存指针：程序代码、进程数据相关指针</p><p>上下文数据：进程执行时处理器存储的数据</p><p>IO状态信息：被进程IO操作所占用的文件列表</p><p>记账信息：使用处理器时间、时钟数总和等</p><img src="..\计算机入门（计组-计网-操作系统）\主存中进程的形态.png"/><ul><li>进程控制块（PCB）：<ul><li>用于描述和控制进程运行的通用数据结构</li><li>记录进程当前状态和控制进程运行的全部信息</li><li>PCB使得进程是能够独立运行的基本单位</li><li>PCB是操作系统进行调度经常会被读取的信息</li><li>PCB是常驻内存的，存放在系统专门开辟的PCB区域内</li></ul></li></ul></li><li><p>进程与线程</p><p>一个进程（Process）可以有一个或多个线程（Thread）</p><img src="..\计算机入门（计组-计网-操作系统）\进程与线程.png"/><ul><li><strong>线程是操作系统进行运行调度的最小单位</strong></li><li>包含在进程中，是进程中实际运行工作的单位</li><li>一个进程可以并发多个线程，每个线程执行不同的任务</li></ul></li></ul><table><thead><tr><th align="center"></th><th align="center">进程</th><th align="center">线程</th></tr></thead><tbody><tr><td align="center">资源</td><td align="center">资源分配的基本单位</td><td align="center">不拥有资源</td></tr><tr><td align="center">调度</td><td align="center">独立调度的基本单位</td><td align="center">独立调度的最小单位</td></tr><tr><td align="center">系统开销</td><td align="center">进程系统开销大</td><td align="center">线程系统开销小</td></tr><tr><td align="center">通信</td><td align="center">进程IPC</td><td align="center">读写同一进程数据通信</td></tr></tbody></table></li></ul></li><li><p>进程管理之五状态模型</p><ul><li><p>创建状态</p><ul><li>分配PCB——&gt;插入就绪队列</li><li>创建进程时拥有PCB但其他资源尚未就绪的状态称为创建状态</li><li>操作系统提供fork函数接口创建进程</li></ul></li><li><p>就绪状态</p><ul><li>当进程被分配到除CPU以外的所有必要资源后</li><li>只要再获得CPU的使用权，就可以立即运行</li><li>其他资源都准备好、只差CPU资源的状态为就绪状态</li><li>在一个系统中多个处于就绪状态的进程通常排成一个队列，该队列称为就绪队列</li></ul></li><li><p>执行状态</p><ul><li>进程获取CPU，其程序正在执行称为执行状态</li><li>在单处理机中，在某个时刻只能有一个进程是处于执行状态</li></ul></li><li><p>阻塞状态</p><ul><li>进程因某种原因如：其他设备未就绪而无法继续执行</li><li>从而放弃CPU的状态称为阻塞状态</li><li>在一个系统中多个处于阻塞状态的进程通常排成一个队列，该队列称为阻塞队列</li></ul></li><li><p>终止状态</p><ul><li>系统清理——&gt;PCB归还</li><li>进程结束由系统清理或者归还PCB的状态称为终止状态</li></ul></li></ul><img src="..\计算机入门（计组-计网-操作系统）\进程的五状态模型.png"/></li><li><p>进程管理之进程同步</p><ul><li><p>为什么需要进程间同步</p><ul><li><p>生产者消费者问题</p><img src="..\计算机入门（计组-计网-操作系统）\生产者消费者问题.png"/><p>生产者往缓冲区+1，消费者往缓冲区-1，在生活中这种模型没有问题</p><p>缓冲（临界资源）是在Cache上的，生产者操作缓冲需要三个步骤：register=count;register=register+1;count=register</p><p>消费者操作缓冲需要三个步骤：register=count;register=register-1;count=register</p><p>单从生产者程序或消费者程序去看是没问题的</p><p>但两者并发执行时就可能出差错</p><img src="..\计算机入门（计组-计网-操作系统）\生产者消费者并发冲突.png"/></li><li><p>哲学家进餐问题</p><img src="..\计算机入门（计组-计网-操作系统）\哲学家进餐问题.png"/><img src="..\计算机入门（计组-计网-操作系统）\哲学家饿死.png"/><p>筷子为临界资源</p></li><li><p>根源问题：彼此相互之间没有通信，“如果生产者通知消费者我已经完成了一件产品”，“哲学家向旁边哲学家说我要进餐了”，则可以有效的解决问题</p></li><li><p>这是我们就需要进程间的同步</p></li><li><p>对竞争资源在多进程间进行使用次序的协调</p></li><li><p>使得并发执行的多个进程之间可以有效使用资源和互相合作</p></li></ul></li><li><p>进程间同步的原则</p><ul><li><p>临界资源</p><p>临界资源指的是一些虽作为共享资源却又无法同时被多个进程共同访问的共享资源。当有进程在使用临界资源时，其他进程必须依据操作系统的同步机制等待占用进程释放该共享资源才可重新竞争使用共享资源</p></li><li><p>空闲让进：资源无占用，允许使用</p></li><li><p>忙则等待：资源有占用，请求进程等待</p></li><li><p>有限等待：保证有限等待时间能够使用资源</p></li><li><p>让权等待：等待时，进程需要让出CPU</p></li><li><p>进程同步的方法：消息队列、共享存储、信号量</p></li></ul></li><li><p>线程同步</p><p>当多个线程并发使用资源时，会发生什么呢？</p><p>进程内的线程也是需要同步的。</p><ul><li>线程同步的方法<ul><li>互斥锁</li><li>读写锁</li><li>自旋锁</li><li>条件变量</li></ul></li></ul></li></ul></li><li><p>Linux的进程管理</p><ul><li><p>Linux进程的相关概念</p><ul><li><p>进程的类型</p><ul><li>前台进程<ul><li>前台进程就是具有终端（终端shell），可以和用户交互的进程</li></ul></li><li>后台进程<ul><li>与前台进程相对，没有占用终端的就是后台进程</li><li>后台程序基本上不和用户交互，优先级比前台进程低</li><li>将需要执行的命令以“&amp;”符号结束</li></ul></li><li>守护进程（特殊的后台进程）<ul><li>守护（daemon）进程是特殊的后台进程</li><li>很多守护进程在系统引导的时候启动，一直运行直到系统关闭</li><li>Linux有很多典型的守护进程</li><li>进程名字以“d”结尾的一般都是守护进程（crond、httpd、sshd、mysqld）</li></ul></li></ul></li><li><p>进程的标记</p><ul><li><p>进程ID</p><ul><li><p>进程ID是进程的唯一标记，每个进程拥有不同的ID</p></li><li><p>进程ID表现为一个非负整数，最大由操作系统限定</p></li><li><p>操作系统提供fork函数接口创建进程</p><img src="..\计算机入门（计组-计网-操作系统）\进程间fork.png"/></li><li><p>父子进程关系可以通过pstree命令查看</p></li><li><p>ID为0的进程为idle进程，是系统创建的第一个进程</p></li><li><p>ID为1的进程为init进程，是0号进程的子进程，完成系统初始化</p></li><li><p>init进程是所有用户进程的祖先进程</p></li></ul></li><li><p>进程的状态标记</p><table><thead><tr><th align="center">状态符号</th><th align="center">状态说明</th></tr></thead><tbody><tr><td align="center"><strong>R</strong></td><td align="center"><strong>（TASK_RUNNING），进程正处于运行状态</strong></td></tr><tr><td align="center"><strong>S</strong></td><td align="center"><strong>（TASK_INTERRUPTIBLE），进程正处于睡眠状态</strong></td></tr><tr><td align="center">D</td><td align="center">(TASK_UNINTERRUPTIBLE)，进程正在处于IO等待的睡眠状态</td></tr><tr><td align="center">T</td><td align="center">(TASK_STOPPED)，进程正处于暂停状态</td></tr><tr><td align="center">Z</td><td align="center">(TASK_DEAD or EXIT_ZOMBIE)，进程正处于退出状态或僵尸进程</td></tr></tbody></table></li></ul></li></ul></li><li><p>操作Linux进程的相关命令</p><ul><li><p>ps命令</p><ul><li>ps命令常用于显示当前进程的状态</li><li>ps命令常配合aux参数或ef参数和grep命令检索特定进程</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印进程详尽的信息</span></span><br><span class="line">ps -aux</span><br><span class="line"><span class="comment"># 查看root用户的进程</span></span><br><span class="line">ps -u root</span><br><span class="line"><span class="comment"># 查看当前指定进程</span></span><br><span class="line">ps -aux|grep <span class="string">&#x27;python3&#x27;</span></span><br><span class="line"><span class="comment"># 查看当前进程树</span></span><br><span class="line">ps -ef --forest</span><br><span class="line"><span class="comment"># 将进程按照cpu的使用频率进行排序后，打印在当前页面</span></span><br><span class="line">ps -aux --sort=-pcpu</span><br><span class="line"><span class="comment"># 将进程按照内存进行排序后，打印在当前页面</span></span><br><span class="line">ps -aux --sort=-pmem</span><br></pre></td></tr></table></figure></li><li><p>top命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示当前所有进程的状态</span></span><br><span class="line"><span class="comment"># PR:进程的优先级VIRT:进程的虚拟内存</span></span><br><span class="line"><span class="comment"># %CPU:进程占用的CPU %MEM:进程使用的内存</span></span><br><span class="line"><span class="comment"># TIME+：进程运行的时间 COMMAND：进程的命令</span></span><br><span class="line"><span class="comment"># total：总内存   free：空闲的内存  </span></span><br><span class="line"><span class="comment"># used：使用的内存   buffer/cache:已经被缓存的内存</span></span><br><span class="line">top</span><br></pre></td></tr></table></figure></li><li><p>kill命令</p><ul><li>kill命令发送指定信号给进程</li><li>kill -l可以查看操作系统支持的信号</li><li>只有（SIGKILL 9）信号可以无条件终止进程，其他信号进程有权忽略</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kill后台进程</span></span><br><span class="line"><span class="comment"># python3 running_process.py &amp;</span></span><br><span class="line"><span class="comment"># 发送9的信号给ID为62016的进程，关闭该进程</span></span><br><span class="line"><span class="built_in">kill</span> -9 62016</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><h3 id="作业管理"><a href="#作业管理" class="headerlink" title="作业管理"></a>作业管理</h3><ol><li><p>作业管理之进程调度</p><ul><li><p>进程调度概述</p><p>进程调度是指计算机通过决策，决定哪个就绪进程可以获得CPU使用权（前提：多道程序设计）</p><p>进程调度步骤一：保留旧进程的运行信息，清除旧进程（收拾包袱）</p><p>进程调度步骤二：选择新进程，准备运行环境并分配CPU（新进驻）</p><p>为了实现进程调度的这两个步骤，我们就需要了解以下三个机制：</p><ul><li><p>就绪队列的排队机制</p><p>将就绪进程按照一定的方式排成队列，以便调度程序可以最快找到就绪进程</p></li><li><p>选择运行进程的委派机制</p><p>调度程序以一定的策略选择就绪进程，将CPU资源分配给他</p></li><li><p>新老进程的上下文切换机制</p><img src="..\计算机入门（计组-计网-操作系统）\新老进程的切换机制.png"/><p>保存当前进程的上下文信息，装入被委派执行进程的运行上下文</p></li></ul><p>如果新进程进来时，老进程还没有执行完，该咋办？</p><ul><li><p>非抢占式的调度</p><ul><li>处理器一旦分配给某个进程，就让该进程一直使用下去</li><li>调度程序不以任何原因抢占正在被使用的处理器</li><li>直到进程完成工作或因为IO阻塞才会让出处理器</li></ul></li><li><p>抢占式的调度</p><ul><li>允许调度程序以一定的策略暂停当前运行的进程</li><li>保存好旧进程的上下文信息，分配处理器给新进程</li></ul><table><thead><tr><th align="center"></th><th align="center">抢占式调度</th><th align="center">非抢占式调度</th></tr></thead><tbody><tr><td align="center">系统开销</td><td align="center">频繁切换，开销大</td><td align="center">切换次数少，开销小</td></tr><tr><td align="center">公平性</td><td align="center">相对公平</td><td align="center">不公平</td></tr><tr><td align="center">应用</td><td align="center">通用系统</td><td align="center">专用系统</td></tr></tbody></table></li></ul></li><li><p>进程调度算法</p><ul><li><p>先来先服务调度算法</p><img src="..\计算机入门（计组-计网-操作系统）\先来先服务调度算法.png"/></li><li><p>短进程优先调度算法</p><p>调度程序优先选择就绪队列中运行时间最短的进程</p><p>短进程优先调度算法不利于长作业进程的执行</p></li><li><p>高优先权调度算法</p><p>进程附带优先权，调度程序优先选择权重高的进程</p><p>高优先权优先权调度算法使得紧迫的任务可以优先处理</p><p>前台进程（与用户交互）优先级&gt;后台进程优先级</p></li><li><p>时间片轮转调度算法</p><p>按照先来先服务的原则排列就绪进程</p><p>每次从队列头部取出待执行进程，分配一个时间片执行</p><p>是相对公平的调度算法，但不能保证及时响应用户</p></li></ul></li></ul></li><li><p>作业管理之死锁</p><p>死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者彼此通信而造成的一种阻塞的现象，若无外力作用，他们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。</p><ul><li><p>死锁的产生</p><ul><li><p>竞争资源</p><ul><li><p>共享资源数量不满足各个进程需求</p></li><li><p>各个进程之间发生资源竞争导致死锁</p><img src="..\计算机入门（计组-计网-操作系统）\资源竞争.png"/></li></ul></li><li><p>进程调度顺序不当</p><img src="..\计算机入门（计组-计网-操作系统）\进程调度顺序不当.png"/></li></ul></li><li><p>死锁的处理</p><ul><li><p>死锁的四个必要条件（4个条件任一 &lt;= 死锁）</p><ul><li><p>互斥条件</p><p>进程对资源的使用是排他性的使用</p></li></ul><p>​       某资源只能由一个进程使用，其他进程需要使用只能等待</p><ul><li><p>请求保持条件</p><p>进程至少保持一个资源，又提出新的资源请求</p><p>新资源被占用，请求被阻塞</p><p>被阻塞的进程不释放自己保持的资源</p></li><li><p>不可剥夺条件</p><p>进程获得的资源在未完成使用前不能被剥夺</p><p>获得的资源只能由进程自身释放</p></li><li><p>环路等待条件</p><p>发生死锁时，必然存在进程-资源环形链</p><img src="..\计算机入门（计组-计网-操作系统）\进程资源环形链.png"/></li></ul></li><li><p>预防死锁的方法</p><ul><li><p>摒弃请求保持条件</p><p>系统规定进程运行之前，一次性申请所有需要的资源</p><p>进程在运行期间不会提出资源请求，从而摒弃请求保持条件</p></li><li><p>摒弃不可剥夺条件</p><p>当一个进程请求新的资源得不到满足时，必须释放占有的资源</p><p>进程运行时占有的资源可以被释放，意味着可以被剥夺</p></li><li><p>摒弃环路等待条件</p><p>可用资源线性排序，申请必须按照需要递增申请</p><p>线性申请不再形成环路，从而摒弃了环路等待条件</p></li></ul></li><li><p>银行家算法</p><ul><li><p>是一个可操作的著名的避免死锁的算法</p></li><li><p>以银行借贷系统分配策略为基础的算法</p></li><li><p>客户申请的贷款是有限的，每次申请需声明最大资金量</p></li><li><p>银行家在能够满足贷款时，都应该给用户贷款</p></li><li><p>客户在使用贷款后，能够及时归还贷款</p><p>已分配资源表：</p><table><thead><tr><th align="center"></th><th align="center">A</th><th align="center">B</th><th align="center">C</th><th align="center">D</th></tr></thead><tbody><tr><td align="center">P1</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">4</td></tr><tr><td align="center">P2</td><td align="center">1</td><td align="center">4</td><td align="center">3</td><td align="center">2</td></tr><tr><td align="center">P3</td><td align="center">1</td><td align="center">3</td><td align="center">5</td><td align="center">4</td></tr><tr><td align="center">P4</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr></tbody></table><p>所需资源表：</p><table><thead><tr><th align="center"></th><th align="center">A</th><th align="center">B</th><th align="center">C</th><th align="center">D</th></tr></thead><tbody><tr><td align="center">P1</td><td align="center">0</td><td align="center">6</td><td align="center">5</td><td align="center">6</td></tr><tr><td align="center">P2</td><td align="center">1</td><td align="center">9</td><td align="center">4</td><td align="center">2</td></tr><tr><td align="center">P3</td><td align="center">1</td><td align="center">3</td><td align="center">5</td><td align="center">6</td></tr><tr><td align="center">P4</td><td align="center">1</td><td align="center">7</td><td align="center">5</td><td align="center">0</td></tr></tbody></table><p>可分配资源表：</p><table><thead><tr><th align="center">A</th><th align="center">B</th><th align="center">C</th><th align="center">D</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">5</td><td align="center">2</td><td align="center">0</td></tr></tbody></table><p>银行家算法：</p><p>所需资源表与已分配资源表做相减运算：</p><table><thead><tr><th align="center"></th><th align="center">A</th><th align="center">B</th><th align="center">C</th><th align="center">D</th></tr></thead><tbody><tr><td align="center">P1</td><td align="center">0</td><td align="center">6</td><td align="center">4</td><td align="center">2</td></tr><tr><td align="center">P2</td><td align="center">0</td><td align="center">5</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">P3</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">2</td></tr><tr><td align="center">P4</td><td align="center">0</td><td align="center">7</td><td align="center">5</td><td align="center">0</td></tr></tbody></table><p>对照该表与可分配资源表：只有P2有足够的运行条件，于是给P2分配资源，等待P2执行完，归还资源。</p></li></ul></li></ul></li></ul></li></ol><h3 id="存储管理"><a href="#存储管理" class="headerlink" title="存储管理"></a>存储管理</h3><ol><li><p>存储管理之内存分配与回收（物理内存的角度）</p><p>早期计算机编程并不需要过多的存储管理，随着计算机和程序越来越复杂，存储管理成为必要</p><p>确保计算机有足够的内存处理数据</p><p>确保程序可以从可用内存中获取一部分内存使用</p><p>确保程序可以归还使用后的内存以供其他程序使用</p><ul><li><p>内存分配的过程</p><ul><li><p>单一连续分配（过时）</p><p>单一连续分配是最简单的内存分配方式</p><p>只能在单用户、单进程的操作系统中使用</p></li><li><p>固定分区分配</p><p>固定分区分配是支持多道程序的最简单存储分配方式</p><p>内存空间被划分为若干固定大小的区域</p><p>每个分区只提供一个程序使用，互不干扰</p></li><li><p>动态分区分配（常用）</p><p>根据进程实际需要，动态分配内存空间</p><p>相关数据结构、分配算法</p><img src="..\计算机入门（计组-计网-操作系统）\动态分区分配.png"/><img src="..\计算机入门（计组-计网-操作系统）\动态分区链表结构.png"/><p>动态分区分配算法：</p><ul><li><p>首次适应算法（FF算法）</p><ul><li><p>分配内存时从开始顺序查找适合内存区</p></li><li><p>若没有适合的空闲区，则该次分配失败</p></li><li><p>每次从头部开始，使得头部地址空间不断被划分</p></li><li><p>改进的算法：循环适应算法</p><p>不是从头部开始分配，而是从上一次分配的位置开始。</p></li></ul></li><li><p>最佳适应算法（BF算法）</p><ul><li><p>最佳适应算法要求空闲区链表按照容量大小排序</p></li><li><p>遍历空闲区链表找到最佳合适空闲区</p><img src="..\计算机入门（计组-计网-操作系统）\最佳适应分配.png"/></li></ul></li><li><p>快速适应算法（QF算法）</p><ul><li><p>快速适应算法要求有多个空闲区链表</p></li><li><p>每个空闲区链表存储一种容量的空闲区</p><img src="..\计算机入门（计组-计网-操作系统）\快速适应算法.png"/></li></ul></li></ul></li></ul></li><li><p>内存回收的过程</p><p>四种回收区与空闲区的位置关系：</p><img src="..\计算机入门（计组-计网-操作系统）\回收区与空闲区的四种情况.png"/><p>情况一：</p><ul><li>不需要新建空闲链表节点</li><li>只需要把空闲区1的容量增大为空闲区即可</li></ul><p>情况二：</p><ul><li>将回收区与空闲区合并</li><li>新的空闲区使用回收区的地址</li></ul><p>情况三：</p><ul><li>将空闲区1、空闲区2和回收区合并</li><li>新的空闲区使用空闲区1的地址</li></ul><p>情况四：</p><ul><li>为回收区创建新的空闲节点</li><li>插入到相应的空闲区链表中去</li></ul></li></ul></li><li><p>存储管理之段页式存储管理</p><p>上一节主要从物理内存的角度聊内存管理，这一节主要从进程的角度聊进程的存储管理。</p><p>也就是问：操作系统如何管理进程的存储空间的呢？</p><p><strong>字块</strong>是相对物理设备的定义</p><p><strong>页面</strong>则是相对逻辑空间的定义</p><ul><li><p>页式存储管理</p><ul><li><p>将进程逻辑空间等分成若干大小的页面</p></li><li><p>相应的把物理内存空间分成也页面大小相等的物理块</p></li><li><p>以页面为单位把进程空间装进物理内存中分散的物理块</p></li><li><p>页面大小应该适中，过大难以分配，过小内存碎片过多</p></li><li><p>页面大小通常512B~8K</p><img src="..\计算机入门（计组-计网-操作系统）\内存碎片.png"/></li><li><p><strong>页表</strong>记录进程逻辑空间与物理空间的映射</p><img src="..\计算机入门（计组-计网-操作系统）\页表.png"/></li><li><p>页式存储管理存在的问题：</p><p>现代计算机系统中，可以支持非常大的逻辑地址空间（2^32 ~ 2^ 64），这样，页表就变得非常大，要占用非常大的内存空间，如，具有32位逻辑地址空间的分页系统，规定页面大小为4KB，则在每个进程页表中的页表项可达1M（2^20）个，如果每个页表项占用1Byte，故每个进程仅仅页表就要占用1MB的内存空间。</p></li></ul></li><li><p>段式存储管理</p></li><li><p>段页式存储管理</p></li></ul></li><li><p>存储管理之虚拟内存</p></li><li><p>Linux的存储管理</p></li></ol><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><ol><li>操作系统的文件管理</li><li>Linux的文件系统</li><li>Linux文件的基本操作</li></ol><h3 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h3><ul><li>操作系统的设备管理</li></ul><h2 id="提升篇"><a href="#提升篇" class="headerlink" title="提升篇"></a>提升篇</h2><h2 id="综合实践-2"><a href="#综合实践-2" class="headerlink" title="综合实践"></a>综合实践</h2><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://www.bilibili.com/video/BV1pt4y1B72b?p=3&spm_id_from=pageDriver">程序员计算机编程入门基础知识（ 计算机组成原理／操作系统／计算机网络）_哔哩哔哩_bilibili</a></p><p><a href="https://www.bilibili.com/video/BV1LJ41137HP?from=search&seid=3851297754132103474&spm_id_from=333.337.0.0">第三章：存储器_哔哩哔哩_bilibili</a></p>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
          <category> 计组计网操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计组计网操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css查漏补缺</title>
      <link href="/2021/10/10/css%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/"/>
      <url>/2021/10/10/css%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html笔记（狂神）</title>
      <link href="/2021/10/02/html%E7%AC%94%E8%AE%B0%EF%BC%88%E7%8B%82%E7%A5%9E%EF%BC%89/"/>
      <url>/2021/10/02/html%E7%AC%94%E8%AE%B0%EF%BC%88%E7%8B%82%E7%A5%9E%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML笔记（狂神说Java）"><a href="#HTML笔记（狂神说Java）" class="headerlink" title="HTML笔记（狂神说Java）"></a>HTML笔记（狂神说Java）</h2><p>​    Hyper Text Markup Language（超文本标记语言）</p><p>​    讲师：秦疆</p><h3 id="一、初识HTML"><a href="#一、初识HTML" class="headerlink" title="一、初识HTML"></a>一、初识HTML</h3><h3 id="二、网页基本标签"><a href="#二、网页基本标签" class="headerlink" title="二、网页基本标签"></a>二、网页基本标签</h3><h3 id="三、图像，超链接，网页布局"><a href="#三、图像，超链接，网页布局" class="headerlink" title="三、图像，超链接，网页布局"></a>三、图像，超链接，网页布局</h3><h3 id="四、列表，表格，媒体元素"><a href="#四、列表，表格，媒体元素" class="headerlink" title="四、列表，表格，媒体元素"></a>四、列表，表格，媒体元素</h3><h3 id="五、表单及表单应用"><a href="#五、表单及表单应用" class="headerlink" title="五、表单及表单应用"></a>五、表单及表单应用</h3><h3 id="六、表单初级验证"><a href="#六、表单初级验证" class="headerlink" title="六、表单初级验证"></a>六、表单初级验证</h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础查漏补缺</title>
      <link href="/2021/09/05/Java%E5%9F%BA%E7%A1%80%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/"/>
      <url>/2021/09/05/Java%E5%9F%BA%E7%A1%80%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Java概述"><a href="#一、Java概述" class="headerlink" title="一、Java概述"></a>一、Java概述</h3><ol><li>一个非public类中依旧可以有入口方法</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        ((UserServiceImpl)userService).setUserDao(<span class="keyword">new</span> UserDaoImpl());</span><br><span class="line">        userService.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello,小狗狗！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>转义字符</p><p>回车与换行：<br>在计算机还没有出现之前，有一种叫做电传打字机（Teletype Model 33）的玩意，每秒钟可以打10个字符。但是它有一个问题，就是打完一行换行的时候，要用去0.2秒，正好可以打两个字符。要是在这0.2秒里面，又有新的字符传过来，那么这个字符将丢失。<br>于是，研制人员想了个办法解决这个问题，就是在每行后面加两个表示结束的字符。一个叫做“回车”，告诉打字机把打印头定位在左边界；另一个叫做“换行”，告诉打字机把纸向下移一行。<br>这就是“换行”和“回车”的来历，从它们的英语名字上也可以看出一二。<br>后来，计算机发明了，这两个概念也就被般到了计算机上。那时，存储器很贵，一些科学家认为在每行结尾加两个字符太浪费了，加一个就可以。于是，就出现了分歧。<br>Unix系统里，每行结尾只有“&lt;换行&gt;”，即“\n”；<br>Windows系统里面，每行结尾是“&lt;换行&gt;&lt;回车&gt;”，即“\n\r”；<br>Mac系统里，每行结尾是“&lt;回车&gt;”。一个直接后果是，Unix/Mac系统下的文件在Windows里打开的话，所有文字会变成一行；而Windows里的文件在Unix/Mac下打开的话，在每行的结尾可能会多出一个^M符号。<br>\r回车是将光标移到一行的前面<br>\n是移到下一行</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">转义字符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello,小\n狗狗！！！&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;世界真大\r，我想去看看！！！&quot;</span>);<span class="comment">//回车符会使得之后的内容输出在同一行第一个位置</span></span><br><span class="line">        System.out.print(<span class="string">&quot;Hello&quot;</span>+<span class="string">&quot;\t&quot;</span>+<span class="string">&quot;\\&quot;</span>+<span class="string">&quot;\&quot;&quot;</span>+<span class="string">&quot;\&#x27;&quot;</span>+<span class="string">&quot;hualala-2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输出结果：</span></span><br><span class="line"><span class="comment">Hello,小</span></span><br><span class="line"><span class="comment">狗狗！！！</span></span><br><span class="line"><span class="comment">，我想看看</span></span><br><span class="line"><span class="comment">Hello\&quot;&#x27;hualala-2</span></span><br><span class="line"><span class="comment">Process finished with exit code 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>Java代码规范<br> 源文件使用utf-8编码<br> Tab和shift Tab的使用</p></li><li><p>DOS命令<br>切换到c盘：cd /D c:<br>使用 /D 开关，除了改变驱动器的当前目录之外，<br>还可改变当前驱动器。<br>查看目录树：tree<br>建立目录、删除目录：md、rd</p></li><li><p>小结</p><p>Java概述讲了什么呢？<br>首先Java是由一个叫高斯林的人在95年推出的，Java的运行机制；jvm、jre、jdk三者的关系；写代码的一些注意事项；基础的dos命令；转义字符；jdk的安装</p></li></ol><p>tips：先完成功能，再优化细节。</p><h3 id="二、变量"><a href="#二、变量" class="headerlink" title="二、变量"></a>二、变量</h3><p>首先当然是变量是什么？变量是程序的基本组成单位<br>变量三要素：类型、名称、值<br>建立一个变量：int id = 2;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="number">100</span>+<span class="number">99</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;100&quot;</span>+<span class="number">99</span>);</span><br><span class="line">        <span class="comment">//100+2先正常执行变为102，遇到字符串后，变为字符串，运算顺序从左到右</span></span><br><span class="line">System.out.println(<span class="number">100</span>+<span class="number">2</span>+<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Hello&quot;</span>+<span class="number">100</span>+<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">199</span></span><br><span class="line"><span class="comment">10099</span></span><br><span class="line"><span class="comment">102Hello</span></span><br><span class="line"><span class="comment">Hello1002</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>然后就是变量的类型介绍，分为基本数据类型和引用数据类型，</p><p>基本数据类型：byte（-128<del>127）、short（-32768</del>32767）（-2^15<del>2^15-1）、int(-2^31</del>2^31-1)、long(-2^63~2^63-1)、float（4字节）、double（8字节）、boolean、char；引用数据类型：类、接口、数组等。</p><p>万一需要表示比long类型最大的值都要大的数，咋表示呢，有常用类中的BigInteger和BigDecimal可以使用。</p><p>使用long型时，加上“l”或“L”，如int id = 1L；编译器先看到1L确定给它分配8个字节，然后再进行赋值操作。</p><p>然后就浮点数嘛，单精度4字节和双精度8字节，浮点数=符号位+指数位+尾数位。小数都是近似值。</p><p>float num1 = .002；报错，.002没啥问题，但小数默认double双精度，使用float类型，加上“f”或“F”。</p><p>float类型保留小数点后7位。double保留小数点后16位左右。</p><p>科学计数法：5.12e2表示5.12*（10^2）；e不是2.7。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">浮点型数值使用陷阱：2.7和8.1/3是否相等（小数比较）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">float</span> num1 = <span class="number">1.12345678901F</span>;</span><br><span class="line"><span class="keyword">double</span> num2 = <span class="number">1.123456789012121211232323123231</span>;</span><br><span class="line">System.out.println(num1);</span><br><span class="line">System.out.println(num2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> num3 = <span class="number">2.7</span>;</span><br><span class="line"><span class="keyword">double</span> num4 = <span class="number">8.1</span>/<span class="number">3</span>;</span><br><span class="line">System.out.println(num3);</span><br><span class="line">System.out.println(num4);</span><br><span class="line">        </span><br><span class="line">        System.out.println(num3-num4);</span><br><span class="line"><span class="comment">//那如何比较两个小数是否相等呢？</span></span><br><span class="line"><span class="comment">//显然if(num3==num4)肯定是不可取的</span></span><br><span class="line"><span class="comment">//当比较的两小数的绝对值在默认相等的范围内，即可认为两数相等</span></span><br><span class="line"><span class="keyword">if</span> (Math.abs(num3-num4)&lt;<span class="number">0.000001</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;差值在默认范围内，可以认为相等！！！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">1.1234568</span></span><br><span class="line"><span class="comment">1.1234567890121212</span></span><br><span class="line"><span class="comment">2.7</span></span><br><span class="line"><span class="comment">2.6999999999999997</span></span><br><span class="line"><span class="comment">4.440892098500626E-16</span></span><br><span class="line"><span class="comment">差值在默认范围内，可以认为相等！！！</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>然后是字符型，char（2字节），利用char型可以表示单个字符</p><h3 id="三、运算符"><a href="#三、运算符" class="headerlink" title="三、运算符"></a>三、运算符</h3><h3 id="四、控制结构"><a href="#四、控制结构" class="headerlink" title="四、控制结构"></a>四、控制结构</h3><h3 id="五、面向对象编程"><a href="#五、面向对象编程" class="headerlink" title="五、面向对象编程"></a>五、面向对象编程</h3><h3 id="六、枚举和注解"><a href="#六、枚举和注解" class="headerlink" title="六、枚举和注解"></a>六、枚举和注解</h3><h3 id="七、异常"><a href="#七、异常" class="headerlink" title="七、异常"></a>七、异常</h3><h3 id="八、常用类"><a href="#八、常用类" class="headerlink" title="八、常用类"></a>八、常用类</h3><h3 id="九、集合"><a href="#九、集合" class="headerlink" title="九、集合"></a>九、集合</h3><h3 id="十、泛型"><a href="#十、泛型" class="headerlink" title="十、泛型"></a>十、泛型</h3><h3 id="十一、线程"><a href="#十一、线程" class="headerlink" title="十一、线程"></a>十一、线程</h3><h3 id="十二、IO"><a href="#十二、IO" class="headerlink" title="十二、IO"></a>十二、IO</h3><h3 id="十三、网络编程"><a href="#十三、网络编程" class="headerlink" title="十三、网络编程"></a>十三、网络编程</h3><h3 id="十四、反射"><a href="#十四、反射" class="headerlink" title="十四、反射"></a>十四、反射</h3><h3 id="十五、Mysql基础"><a href="#十五、Mysql基础" class="headerlink" title="十五、Mysql基础"></a>十五、Mysql基础</h3><h3 id="十六、jdbc和连接池"><a href="#十六、jdbc和连接池" class="headerlink" title="十六、jdbc和连接池"></a>十六、jdbc和连接池</h3><h4 id="一、jdbc概述"><a href="#一、jdbc概述" class="headerlink" title="一、jdbc概述"></a>一、jdbc概述</h4><p>jdbc是什么？</p><p>jdbc是一套为不同的数据库提供了统一访问的接口。相关类和接口在java.sql和javax.sql包里。</p><p>jdbc的基本原理图：</p><p>Java厂商提供一套jdbc接口规范，不同的数据库厂商根据接口，实现具体的类，具体类会被打包成jar包，该jar包就是我们所说的驱动。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">不同的数据库厂商实现统一的接口规范，体现了一种多态的思想</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJdbc</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//JdbcInterface jdbcInterface = new MysqlImpl();</span></span><br><span class="line">        JdbcInterface jdbcInterface = <span class="keyword">new</span> OracleImpl();</span><br><span class="line">        jdbcInterface.getConnection();</span><br><span class="line">        jdbcInterface.crud();</span><br><span class="line">        jdbcInterface.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//统一的接口规范</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">JdbcInterface</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getConnection</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">crud</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不同的实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MysqlImpl</span> <span class="keyword">implements</span> <span class="title">JdbcInterface</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Mysql连接成功！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">crud</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Mysql进行crud操作！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Mysql关闭资源连接！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OracleImpl</span> <span class="keyword">implements</span> <span class="title">JdbcInterface</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Oracle连接成功！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">crud</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Oracle进行crud操作！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Oracle关闭资源连接！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二、jdbc快速入门"><a href="#二、jdbc快速入门" class="headerlink" title="二、jdbc快速入门"></a>二、jdbc快速入门</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">第一个jdbc程序，完成简单的操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testjdbc</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//注册驱动</span></span><br><span class="line">        Class.forname(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//建立连接</span></span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/hsp_db02&quot;</span>;</span><br><span class="line">        String user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        Connection connection = DriverManager.getConnection(url, user, password);</span><br><span class="line">        <span class="comment">//组织并执行sql</span></span><br><span class="line">        <span class="comment">//增</span></span><br><span class="line">        String sql = <span class="string">&quot;insert into actor(id,name,gender,borntime,phone) values(null,&quot;</span>海绵宝宝<span class="string">&quot;,&quot;</span>男<span class="string">&quot;,&quot;</span><span class="number">1991</span>-<span class="number">1</span>-<span class="number">1</span><span class="string">&quot;,&quot;</span><span class="number">1231232</span><span class="string">&quot;)&quot;</span>;</span><br><span class="line">        <span class="comment">//物理删</span></span><br><span class="line">        String sql2 = <span class="string">&quot;delete from actor where id = 2&quot;</span>;</span><br><span class="line">        <span class="comment">//改（逻辑删除）</span></span><br><span class="line">        String sql3 = <span class="string">&quot;update actor set name = &#x27;派大星&#x27; where id = 1&quot;</span>;</span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line">        <span class="keyword">int</span> row = statement.executeUpdate(sql);<span class="comment">//影响的行数</span></span><br><span class="line">        System.out.println(row &gt; <span class="number">0</span> ? <span class="string">&quot;成功&quot;</span> : <span class="string">&quot;失败&quot;</span>);</span><br><span class="line">       <span class="comment">//关闭资源连接</span></span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">五种加载驱动连接数据库的方式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConnectionWays</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方式1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnectionWay1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//加载驱动</span></span><br><span class="line">        Driver driver = <span class="keyword">new</span> com.mysql.jdbc.Driver();</span><br><span class="line">        <span class="comment">//建立连接</span></span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/hsp_db02&quot;</span>;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.setProperties(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        properties.setProperties(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        Connection connection = driver.connect(url,properties);</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        <span class="comment">//组织并执行sql</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//关闭资源连接</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方式2：加载驱动改为反射获得</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnectionWay2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//加载驱动</span></span><br><span class="line">        Class&lt;?&gt; aclass = Class.forname(<span class="string">&quot;con.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        Driver driver = (Driver)aclass.newInstance();</span><br><span class="line">        <span class="comment">//建立连接</span></span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/hsp_db02&quot;</span>;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.setProperties(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        properties.setProperties(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        Connection connection = driver.connect(url,properties);</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        <span class="comment">//组织并执行sql</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//关闭资源连接</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnectionWay3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//加载驱动</span></span><br><span class="line">        Class&lt;?&gt; aclass = Class.forname(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        Driver driver = (Driver)aclass.newInstance();</span><br><span class="line">        <span class="comment">//建立连接</span></span><br><span class="line">     <span class="string">&quot;&quot;</span>   </span><br><span class="line">        DriverManager.registerDriver(driver);</span><br><span class="line">        DriverManager.getConnection(url,user,password);</span><br><span class="line">        <span class="comment">//组织并执行sql</span></span><br><span class="line">        <span class="comment">//关闭资源连接</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="三、jdbcAPI"><a href="#三、jdbcAPI" class="headerlink" title="三、jdbcAPI"></a>三、jdbcAPI</h4><h4 id="四、jdbcUtils"><a href="#四、jdbcUtils" class="headerlink" title="四、jdbcUtils"></a>四、jdbcUtils</h4><h4 id="五、事务"><a href="#五、事务" class="headerlink" title="五、事务"></a>五、事务</h4><h4 id="六、批处理"><a href="#六、批处理" class="headerlink" title="六、批处理"></a>六、批处理</h4><h4 id="七、连接池"><a href="#七、连接池" class="headerlink" title="七、连接池"></a>七、连接池</h4><h4 id="八、Apache-DBUtils"><a href="#八、Apache-DBUtils" class="headerlink" title="八、Apache-DBUtils"></a>八、Apache-DBUtils</h4><h4 id="九、DAO的增删改查-BasicDAO"><a href="#九、DAO的增删改查-BasicDAO" class="headerlink" title="九、DAO的增删改查-BasicDAO"></a>九、DAO的增删改查-BasicDAO</h4><h3 id="十七、正则表达式"><a href="#十七、正则表达式" class="headerlink" title="十七、正则表达式"></a>十七、正则表达式</h3><h3 id="十八、Java8和Java11新特性"><a href="#十八、Java8和Java11新特性" class="headerlink" title="十八、Java8和Java11新特性"></a>十八、Java8和Java11新特性</h3>]]></content>
      
      
      <categories>
          
          <category> J2SE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> J2SE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反射</title>
      <link href="/2021/08/29/Java%E5%8F%8D%E5%B0%84/"/>
      <url>/2021/08/29/Java%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">引入：</span></span><br><span class="line"><span class="comment">静态语言与动态语言：静态语言即在运行时结构不能被改变的语言，如Java、C、C++，而反射使得Java成为“准动态语言”。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反射：如何获得class类的几种方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liyou</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-30-1:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException</span>&#123;</span><br><span class="line">        <span class="comment">//1、通过类名获得Class类</span></span><br><span class="line">        Class clazz1 = Person.class;</span><br><span class="line">        System.out.println(clazz1.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、通过实例对象获得Class类</span></span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        Class clazz2 = person.getClass();</span><br><span class="line">        System.out.println(clazz2.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、通过全类名获得Class类</span></span><br><span class="line">        Class clazz3 = Class.forName(<span class="string">&quot;com.atguigu.eduservice.Person&quot;</span>);</span><br><span class="line">        System.out.println(clazz3.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">哪些类型可以获得class对象呢？</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//类的class</span></span><br><span class="line">        Class clazz1 = Test.class;</span><br><span class="line">        <span class="comment">//接口</span></span><br><span class="line">        Class clazz2 = Serializable.class;</span><br><span class="line">        <span class="comment">//注解</span></span><br><span class="line">        Class clazz3 = Target.class;</span><br><span class="line">        <span class="comment">//枚举</span></span><br><span class="line">        Class clazz4 = ElementType.class;</span><br><span class="line">        <span class="comment">//数组</span></span><br><span class="line">        Class clazz5 = <span class="keyword">int</span>[].class;</span><br><span class="line">        <span class="comment">//基本数据类型</span></span><br><span class="line">        Class clazz6 = <span class="keyword">int</span>.class;</span><br><span class="line">        <span class="comment">//void</span></span><br><span class="line">        Class clazz7 = <span class="keyword">void</span>.class;</span><br><span class="line"></span><br><span class="line">        System.out.println(clazz1);</span><br><span class="line">        System.out.println(clazz2);</span><br><span class="line">        System.out.println(clazz3);</span><br><span class="line">        System.out.println(clazz4);</span><br><span class="line">        System.out.println(clazz5);</span><br><span class="line">        System.out.println(clazz6);</span><br><span class="line">        System.out.println(clazz7);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">class com.atguigu.eduservice.Test</span></span><br><span class="line"><span class="comment">interface java.io.Serializable</span></span><br><span class="line"><span class="comment">interface java.lang.annotation.Target</span></span><br><span class="line"><span class="comment">class java.lang.annotation.ElementType</span></span><br><span class="line"><span class="comment">class [I</span></span><br><span class="line"><span class="comment">int</span></span><br><span class="line"><span class="comment">void</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> J2SE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> J2SE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java注解</title>
      <link href="/2021/08/28/Java%E6%B3%A8%E8%A7%A3/"/>
      <url>/2021/08/28/Java%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">首先什么是注解?</span></span><br><span class="line"><span class="comment">Java的注解是Java1.5之后推出的新功能，注解的作用：其一可以和注释一样，对代码进行解释说明，其二，也是较为重要的一点，可以被其他代码读取。注解的使用：@+注解名，并可以添加参数。</span></span><br><span class="line"><span class="comment">四个元注解：</span></span><br><span class="line"><span class="comment">1&gt;<span class="doctag">@Target</span>：规定被注解代码的作用目标，types、成员变量、成员方法、形参等</span></span><br><span class="line"><span class="comment">2&gt;<span class="doctag">@Retention</span>：保留范围：SOURCE/CLASS/RUNTIME，一般RUNTIME即可</span></span><br><span class="line"><span class="comment">3&gt;<span class="doctag">@Documented</span>：生成Javadoc文档</span></span><br><span class="line"><span class="comment">4&gt;<span class="doctag">@Inherited</span>：子类可以被父类继承</span></span><br><span class="line"><span class="comment">一些内置注解：</span></span><br><span class="line"><span class="comment"><span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment"><span class="doctag">@Surpresswarnings</span></span></span><br><span class="line"><span class="comment">自定义注解的创建：</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//自定义注解的创建</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD,ElementType.CONSTRUCTOR&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Student&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> J2SE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> J2SE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot项目实战</title>
      <link href="/2021/08/22/springboot%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
      <url>/2021/08/22/springboot%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h3 id="一、项目结构"><a href="#一、项目结构" class="headerlink" title="一、项目结构"></a>一、项目结构</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//大神们直接写业务逻辑，作为newfish还是得先从熟悉代码开始呀！</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">springboot一站式整合！！！</span></span><br><span class="line"><span class="comment">idea编写，一个项目中有多个模块，每个项目中又会有很多的子模块</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><img src="D:\developer_tools\blog\imgs\pic1.PNG" alt="项目结构"></p><h3 id="二、代码生成器"><a href="#二、代码生成器" class="headerlink" title="二、代码生成器"></a>二、代码生成器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">利用代码生成器快速建成controller、service、mapper、entity,代码生成器不参与打包。可直接放在test下</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><img src="D:\developer_tools\blog\imgs\pic2.PNG"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*代码生成器*/</span></span><br><span class="line"><span class="keyword">package</span> com.atguigu.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建代码生成器</span></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        <span class="comment">//String projectPath = System.getProperty(&quot;user.dir&quot;);</span></span><br><span class="line">        gc.setOutputDir(<span class="string">&quot;C:\\Users\\Liyou\\IdeaProjects\\guli_parent\\service\\service_edu&quot;</span> + <span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">&quot;testjava&quot;</span>);</span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>); <span class="comment">//生成后是否打开资源管理器</span></span><br><span class="line">        gc.setFileOverride(<span class="keyword">false</span>); <span class="comment">//重新生成时文件是否覆盖</span></span><br><span class="line">        gc.setServiceName(<span class="string">&quot;%sService&quot;</span>);<span class="comment">//去掉Service接口的首字母I</span></span><br><span class="line">        gc.setIdType(IdType.ID_WORKER_STR); <span class="comment">//主键策略</span></span><br><span class="line">        gc.setDateType(DateType.ONLY_DATE);<span class="comment">//定义生成的实体类中日期类型</span></span><br><span class="line">        gc.setSwagger2(<span class="keyword">true</span>);<span class="comment">//开启Swagger2模式</span></span><br><span class="line"></span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、数据源配置</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/guli?serverTimezone=GMT%2B8&quot;</span>);</span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、包配置</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        pc.setParent(<span class="string">&quot;com.atguigu&quot;</span>);</span><br><span class="line">        pc.setModuleName(<span class="string">&quot;eduservice&quot;</span>); <span class="comment">//模块名</span></span><br><span class="line">        pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        pc.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">        pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategy.setInclude(<span class="string">&quot;edu_teacher&quot;</span>);</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);<span class="comment">//数据库表映射到实体的命名策略</span></span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + <span class="string">&quot;_&quot;</span>); <span class="comment">//生成实体时去掉表前缀</span></span><br><span class="line"></span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);<span class="comment">//数据库表字段映射到实体的命名策略</span></span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>); <span class="comment">// lombok 模型 @Accessors(chain = true) setter链式操作</span></span><br><span class="line"></span><br><span class="line">        strategy.setRestControllerStyle(<span class="keyword">true</span>); <span class="comment">//restful api风格控制器</span></span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>); <span class="comment">//url中驼峰转连字符</span></span><br><span class="line"></span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6、执行</span></span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三、后台讲师模块的讲师列表和删除"><a href="#三、后台讲师模块的讲师列表和删除" class="headerlink" title="三、后台讲师模块的讲师列表和删除"></a>三、后台讲师模块的讲师列表和删除</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*在controller层进行注入和调用*/</span></span><br><span class="line"><span class="comment">//controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EduTeacherController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问地址：http://localhost:8001/eduservice/edu-teacher/findAll</span></span><br><span class="line">    <span class="comment">//把service注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EduTeacherService teacherService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询讲师模块所有数据</span></span><br><span class="line">    <span class="comment">//rest风格</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;所有讲师列表&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;EduTeacher&gt; <span class="title">findAllTeacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用service的方法实现查询所有的操作</span></span><br><span class="line">        List&lt;EduTeacher&gt; list = teacherService.list(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;根据id逻辑删除讲师&quot;)</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeTeacher</span><span class="params">(<span class="meta">@ApiParam(name = &quot;id&quot;,value = &quot;讲师ID&quot;,required = true)</span> <span class="meta">@PathVariable</span> String id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = teacherService.removeById(id);</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//service</span></span><br><span class="line"><span class="keyword">import</span> com.atguigu.eduservice.entity.EduTeacher;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.eduservice.mapper.EduTeacherMapper;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.eduservice.service.EduTeacherService;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EduTeacherServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">EduTeacherMapper</span>, <span class="title">EduTeacher</span>&gt; <span class="keyword">implements</span> <span class="title">EduTeacherService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//mapper</span></span><br><span class="line"><span class="keyword">import</span> com.atguigu.eduservice.entity.EduTeacher;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EduTeacherMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">EduTeacher</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//entity略</span></span><br><span class="line"><span class="comment">//myconfig</span></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.injector.ISqlInjector;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.injector.LogicSqlInjector;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liyou</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-22-15:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.atguigu.eduservice.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EduConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//逻辑删除插件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ISqlInjector <span class="title">sqlInjector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LogicSqlInjector();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、整合swagger"><a href="#四、整合swagger" class="headerlink" title="四、整合swagger"></a>四、整合swagger</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">另开一个模块用于写公用的工具，如用于测试接口和生成文档的swagger</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> com.atguigu.servicebase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Predicates;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liyou</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-08-22-22:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">webApiConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .groupName(<span class="string">&quot;webApi&quot;</span>)</span><br><span class="line">                .apiInfo(webApiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .paths(Predicates.not(PathSelectors.regex(<span class="string">&quot;/admin/.*&quot;</span>)))</span><br><span class="line">                .paths(Predicates.not(PathSelectors.regex(<span class="string">&quot;/error.*&quot;</span>)))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">webApiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">&quot;网站-课程中心API文档&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;本文档描述了课程中心微服务接口定义&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">&quot;Helen&quot;</span>, <span class="string">&quot;http://atguigu.com&quot;</span>, <span class="string">&quot;55317332@qq.com&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2021/08/19/Maven/"/>
      <url>/2021/08/19/Maven/</url>
      
        <content type="html"><![CDATA[<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Maven一些知识点--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cloud-alibaba.version</span>&gt;</span>0.2.2.RELEASE<span class="tag">&lt;/<span class="name">cloud-alibaba.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span><span class="comment">&lt;!--坐标gav--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--$&#123;&#125;引用properties里的版本--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;cloud-alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--type默认是jar，可以改成war，这两种比较常用；这里我们说下pom，当需要引入很多依赖的时候，pom.xml文件会过大，我们可以通过依赖一个父项目来解决这个问题，但也可能导致父项目pom.xml文件过大，所以最终的方法是type改成pom方式，即把很多jar包打包到一个pom中，我们依赖了pom，就可以下载所有的jar包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--scope标签的详细介绍如下--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span>   </span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kuang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>helloworld<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>helloworld<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web依赖：集成tomcat，完成dispatcherServlet,xml...--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--打jar包插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如上所示，主要有四个部分：</p><ul><li>项目元数据信息：创建时候输入的Project Metadata部分，也就是Maven项目的基本元素，包括：groupId、artifactId、version、name、description等</li><li>parent：继承spring-boot-starter-parent的依赖管理，控制版本与打包等内容</li><li>dependencies：项目具体依赖，这里包含了spring-boot-starter-web用于实现HTTP接口（该以来中包含Spring MVC），官网对它的描述是：使用Spring MVC构建Web（包括RESTful）应用程序的入门者，使用Tomcat作为默认嵌入式容器。spring-boot-starter-test用于编写单元测试的依赖包。</li><li>build：构建配置部分。默认使用了spring-boot-maven-plugin，配合spring-boot-starter-parent就可以把Spring Boot应用打成jar包直接运行。</li></ul><p>用于运行junit4引擎测试<br>                    @Test这个注解<br>                    如果spring-boot-starter-test 没有 排除 junit-vintage-engine依赖，那么会导致<br>                    org.junit.jupiter.api.Test 和 org.junit.Test 同时存在，<br>                    如果不小心引入了org.junit.Test ，<br>                    那么就会发生这个spring 属性注入为null的情况<br>                    1、Spring Boot项目推荐编写JUnit 5测试用例，所以不需要JUnit 4引擎。<br>                    2、开发者在引入包时，有两个选择，<br>                    不小心导错包导致出现MockMvc和WebApplicationContext无法加载，<br>                    间接导致出现属性为null的情况</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--compile(默认)</span></span><br><span class="line"><span class="comment">如果没有指定scope,那么该元素的默认值为compile。被依赖项目需要参与到项目的编译、测试、打包、运行等阶段，打包时通常会包含被依赖项目，是比较强的依赖。</span></span><br><span class="line"><span class="comment">provided</span></span><br><span class="line"><span class="comment">被依赖项目理论上可以参与到项目的编译、测试、运行等阶段，当时在打包时进行了exclude动作。</span></span><br><span class="line"><span class="comment">应用场景：例如我们在开发一个web项目，在编译的时候我们需要依赖servlet-api.jar,但在运行时我们不需要这个jar，因为它已由应用服务器提供，这是我们就需要用provided来修饰这个依赖包。</span></span><br><span class="line"><span class="comment">runtime</span></span><br><span class="line"><span class="comment">顾名思义，表示该依赖项目无需参与到项目的编译，但会参与到测试与运行阶段。</span></span><br><span class="line"><span class="comment">应用场景：例如在编译时我们不需要JDBC API的jar，但在运行时才需要JDBC的驱动包。</span></span><br><span class="line"><span class="comment">test</span></span><br><span class="line"><span class="comment">表示该依赖项目仅会参与到项目的测试阶段。</span></span><br><span class="line"><span class="comment">应用场景：例如，Junit 测试。</span></span><br><span class="line"><span class="comment">system</span></span><br><span class="line"><span class="comment">与provided类似，但是被依赖项不会从maven仓库查找依赖，而是从本地系统中获取，systemPath元素用于指定依赖在系统中jar的路径。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.cjf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>auth-center<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;basedir&#125;/MyContent/WEB-INF/lib/auth-center.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--import</span></span><br><span class="line"><span class="comment">它只使用在dependencyManagement中，我们知道maven和java只能单继承，作用是管理依赖包的版本，一般用来保持当前项目的所有依赖版本统一。</span></span><br><span class="line"><span class="comment">例如：项目中有很多的子项目，并且都需要保持依赖版本的统一，以前的做法是创建一个父类来管理依赖的版本，所有的子类继承自父类，这样就会导致父项目的pom.xml非常大，而且子项目不能再继承其他项目。</span></span><br><span class="line"><span class="comment">import为我们解决了这个问题，可以把dependencyManagement放到一个专门用来管理依赖版本的pom中，然后在需要用到该依赖配置的pom中使用scope import就可以引用配置。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot(1)</title>
      <link href="/2021/08/17/springboot-1/"/>
      <url>/2021/08/17/springboot-1/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">关于一个最基础的springboot项目，我们第一个想到是该是什么呢？</span></span><br><span class="line"><span class="comment">1、导入依赖（pom.xml）</span></span><br><span class="line"><span class="comment">2、文件配置（.property .yml）</span></span><br><span class="line"><span class="comment">链接mysql数据库</span></span><br><span class="line"><span class="comment">3、模块编写(从上到下)</span></span><br><span class="line"><span class="comment">1&gt;view层：与controller层协同工作，以js为主，动态展示前端</span></span><br><span class="line"><span class="comment">2&gt;controller层：业务模块的流程控制，调用service层的个个接口，控制具体的业务流程</span></span><br><span class="line"><span class="comment">3&gt;service层：业务模块的逻辑应用设计，先设计接口，再实现接口方法</span></span><br><span class="line"><span class="comment">4&gt;dao层：（mapper）Data Access Object 持久化层，有效管理数据</span></span><br><span class="line"><span class="comment">mp的crud:</span></span><br><span class="line"><span class="comment">增：insert </span></span><br><span class="line"><span class="comment">删：物理删除：deleteById 批量删除：deleteBatchIds 逻辑删除：增加<span class="doctag">@Version</span>注解，handler内添加语句</span></span><br><span class="line"><span class="comment">改：updateById</span></span><br><span class="line"><span class="comment">查：selectById、selectBatchIds、selectPage(分页查询)、selectList、复杂查询</span></span><br><span class="line"><span class="comment">mp的其他技术点：主键自动添加、属性自动填充、乐观锁</span></span><br><span class="line"><span class="comment">5&gt;entity层：根据mysql中各表情况，实体化各个属性，添加注解便于功能实现</span></span><br><span class="line"><span class="comment">如：以mybatis_plus为例，</span></span><br><span class="line"><span class="comment">lombok的<span class="doctag">@Data</span>，免除get/set/toString等方法的编写，爽的飞起</span></span><br><span class="line"><span class="comment">以何种方式自动添加主键的<span class="doctag">@TableId</span>(type=IdType.ID_WORKER)</span></span><br><span class="line"><span class="comment">某些属性的自动填充<span class="doctag">@TableField</span>(fill=FieldFill.INSERT_UPDATE)//添加和更新加该条注解的属性皆会自动填充</span></span><br><span class="line"><span class="comment">实现乐观锁中的版本号<span class="doctag">@Version</span>，需添加Version字段，以及乐观锁插件</span></span><br><span class="line"><span class="comment">做逻辑删除的<span class="doctag">@TableLogic</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//entity</span></span><br><span class="line"><span class="comment">//一律使用基本数据类型的包装类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="meta">@TableId(type=IdType.ID_WORKER)</span><span class="comment">//AUTO/INPUT/NONE/UUID/ID_WORKER_STR</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//对应属性create_time</span></span><br><span class="line">    <span class="meta">@TableField(fill=FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="comment">//对应属性update_time</span></span><br><span class="line">    <span class="meta">@TableField(fill=FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="keyword">private</span> Integer deleted;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mapper</span></span><br><span class="line"><span class="comment">//引入mybatisplus中的BaseMapper</span></span><br><span class="line"><span class="meta">@Repository</span><span class="comment">//交给springboot实现接口实体化</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">userMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt;</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//乐观锁插件</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> OptimisticLockerIntercepter <span class="title">optimisticLockerIntercepter</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerIntercepter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github公匙登录</title>
      <link href="/2021/08/15/github%E5%85%AC%E5%8C%99%E7%99%BB%E5%BD%95/"/>
      <url>/2021/08/15/github%E5%85%AC%E5%8C%99%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">8月13日登录gitHub失败解决办法（window10）：ssh登录</span></span><br><span class="line"><span class="comment">tips:</span></span><br><span class="line"><span class="comment">在cmd窗口窗口复制公匙到github窗口时，注意去除空格。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>参考文章:</p><p><a href="https://xie.infoq.cn/article/fc28268dc4972d2aef45c7def">GitHub不再支持密码验证解决方案：SSH免密与Token登录配置 - InfoQ 写作平台</a>)</p><p><a href="%5B(8%E6%9D%A1%E6%B6%88%E6%81%AF">github 配置 SSH 免密登录</a> github配置SSH免密登录_从小吃外卖的博客-CSDN博客_github ssh免密登录](<a href="https://blog.csdn.net/qq_38163309/article/details/105335097">https://blog.csdn.net/qq_38163309/article/details/105335097</a>))</p><p><a href="%5B(8%E6%9D%A1%E6%B6%88%E6%81%AF">什么时ssh以及常见的ssh功能</a> 什么是SSH 以及常见的ssh 功能_dingxie1963的博客-CSDN博客](<a href="https://blog.csdn.net/dingxie1963/article/details/101259529?ops_request_misc=%7B%22request_id%22:%22162899117016780262554419%22,%22scm%22:%2220140713.130102334..%22%7D&amp;request_id=162899117016780262554419&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-101259529.first_rank_v2_pc_rank_v29&amp;utm_term=ssh&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/dingxie1963/article/details/101259529?ops_request_misc=%7B%22request%5Fid%22%3A%22162899117016780262554419%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=162899117016780262554419&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-101259529.first_rank_v2_pc_rank_v29&amp;utm_term=ssh&amp;spm=1018.2226.3001.4187</a>))</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis_plus</title>
      <link href="/2021/08/12/mybatis-plus-1/"/>
      <url>/2021/08/12/mybatis-plus-1/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">新的闯关小游戏Mybatis_plus</span></span><br><span class="line"><span class="comment">让我们看看这个关于数据库框架的小游戏又有多少关卡呢！！！</span></span><br><span class="line"><span class="comment">1、第一个问题当然是什么是Mybatis_plus以及她的特点是什么？（不痛不痒的扯两句就行）</span></span><br><span class="line"><span class="comment">是mybatis的加强版，略略略</span></span><br><span class="line"><span class="comment">2、使用：在springboot一站式整合框架下，加入相关依赖</span></span><br><span class="line"><span class="comment">3、管中窥豹的技术点</span></span><br><span class="line"><span class="comment">1&gt;添加操作，主键生成策略</span></span><br><span class="line"><span class="comment">        添加操作：</span></span><br><span class="line"><span class="comment">        <span class="doctag">@Test</span></span></span><br><span class="line"><span class="comment">        public void addUser()&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            User user = new User();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            user.setName(&quot;地狱的龙卷&quot;);</span></span><br><span class="line"><span class="comment">            user.setAge(18);</span></span><br><span class="line"><span class="comment">            user.setEmail(&quot;QiYu.@163.com&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            int insert = userMapper.insert(user);</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;insert:&quot;+insert);//影响的行数</span></span><br><span class="line"><span class="comment">            System.out.println(user);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        主键生成策略：</span></span><br><span class="line"><span class="comment">        <span class="doctag">@Data</span></span></span><br><span class="line"><span class="comment">        public class User &#123;</span></span><br><span class="line"><span class="comment">            //AUTO：自动增长（注意表中主键设auto_increment）</span></span><br><span class="line"><span class="comment">            //INPUT：设置id值</span></span><br><span class="line"><span class="comment">            //NONE：输入</span></span><br><span class="line"><span class="comment">            //UUID：随机唯一值</span></span><br><span class="line"><span class="comment">            //ID_WORKER：mp自带策略，生成19位值，数字类型使用这种策略，比如Long</span></span><br><span class="line"><span class="comment">            //ID_WORKER_STR：mp自带策略，生成19位值，字符串类型使用这种策略</span></span><br><span class="line"><span class="comment">            <span class="doctag">@TableId</span>(type = IdType.ID_WORKER)</span></span><br><span class="line"><span class="comment">            private Long id;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            private String name;</span></span><br><span class="line"><span class="comment">            private Integer age;</span></span><br><span class="line"><span class="comment">            private String email;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            <span class="doctag">@TableField</span>(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="comment">            private Date createTime;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            <span class="doctag">@TableField</span>(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="comment">            private Date updateTime;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">2&gt;修改操作，自动填充</span></span><br><span class="line"><span class="comment">        修改操作：</span></span><br><span class="line"><span class="comment">        <span class="doctag">@Test</span></span></span><br><span class="line"><span class="comment">        public void updateById()&#123;</span></span><br><span class="line"><span class="comment">            User user = new User();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            user.setId(1421442752316321793L);</span></span><br><span class="line"><span class="comment">            user.setAge(28);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            int row = userMapper.updateById(user);</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;row:&quot;+row);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        自动填充：</span></span><br><span class="line"><span class="comment">        <span class="doctag">@Data</span></span></span><br><span class="line"><span class="comment">        public class User &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            <span class="doctag">@TableId</span>(type = IdType.ID_WORKER)</span></span><br><span class="line"><span class="comment">            private Long id;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            private String name;</span></span><br><span class="line"><span class="comment">            private Integer age;</span></span><br><span class="line"><span class="comment">            private String email;</span></span><br><span class="line"><span class="comment">            //添加两个字段</span></span><br><span class="line"><span class="comment">            <span class="doctag">@TableField</span>(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="comment">            private Date createTime;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            <span class="doctag">@TableField</span>(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="comment">            private Date updateTime;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        元对象：</span></span><br><span class="line"><span class="comment">        <span class="doctag">@Component</span>//表示将其交给spring去管理</span></span><br><span class="line"><span class="comment">        public class MyMetaObjectHandler implements MetaObjectHandler&#123;</span></span><br><span class="line"><span class="comment">            //使用mp实现   添加   操作，这个方法执行</span></span><br><span class="line"><span class="comment">            <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment">            public void insertFill(MetaObject metaObject) &#123;</span></span><br><span class="line"><span class="comment">                this.setFieldValByName(&quot;createTime&quot;,new Date(),metaObject);</span></span><br><span class="line"><span class="comment">                this.setFieldValByName(&quot;updateTime&quot;,new Date(),metaObject);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            //使用mp实现   修改   操作，这个方法执行</span></span><br><span class="line"><span class="comment">            <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment">            public void updateFill(MetaObject metaObject) &#123;</span></span><br><span class="line"><span class="comment">                this.setFieldValByName(&quot;updateTime&quot;,new Date(),metaObject);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        当调用添加或修改方法时，spring会根据注解和元对象对相关字段进行填充。</span></span><br><span class="line"><span class="comment">3&gt;乐观锁</span></span><br><span class="line"><span class="comment">4&gt;简单查询和分页查询</span></span><br><span class="line"><span class="comment">5&gt;逻辑删除功能</span></span><br><span class="line"><span class="comment">6&gt;复杂查询</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">tips:</span></span><br><span class="line"><span class="comment">再次遇到同一个关于数据库启动失败的问题，显示如下，</span></span><br><span class="line"><span class="comment">悔当时没有好好总结一下解决办法，嘤嘤嘤！！！</span></span><br><span class="line"><span class="comment">解决办法：</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><img src="D:\developer_tools\blog\source\images\mysql启动异常.PNG"></p><p><img src="D:\developer_tools\blog\source\images\2.PNG"></p>]]></content>
      
      
      <categories>
          
          <category> mybatis_plus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis_plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法</title>
      <link href="/2021/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
      <url>/2021/08/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">思维导图：字符串、数组、链表、堆栈、队列、哈希表、树、图。排序、查找、递归、KMP、分治思想、动态规划、贪心。   </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*字符串：</span></span><br><span class="line"><span class="comment">    谈到字符串该想到什么呢？</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="comment">//1、创建字符串</span></span><br><span class="line">    String str1 = <span class="keyword">new</span> String(<span class="string">&quot;qwer&quot;</span>);</span><br><span class="line">String str11 = </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**数组：</span></span><br><span class="line"><span class="comment">稀疏数组的压缩与恢复</span></span><br><span class="line"><span class="comment">压缩规则：压缩后矩阵</span></span><br><span class="line"><span class="comment">[0,0]位置：原数组行数</span></span><br><span class="line"><span class="comment">[0,1]位置：原数组列数</span></span><br><span class="line"><span class="comment">[0,2]位置：原数组非0元素个数</span></span><br><span class="line"><span class="comment">第0行往下（不含第0行）：记录每个非0元素的行数、列数、实际值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSparseArr</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][<span class="number">21</span>];</span><br><span class="line">        arr1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        arr1[<span class="number">2</span>][<span class="number">4</span>] = <span class="number">3</span>;</span><br><span class="line">        <span class="comment">//原数组</span></span><br><span class="line">        print(arr1);</span><br><span class="line">        <span class="comment">//压缩后</span></span><br><span class="line">        <span class="keyword">int</span>[][] arr2 = sparseArrToResArr(arr);</span><br><span class="line">        print(arr2);</span><br><span class="line">        <span class="comment">//恢复</span></span><br><span class="line">        <span class="keyword">int</span>[][] arr3 = resArrToSparseArr(arr2);</span><br><span class="line">        print(arr3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//压缩</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] sparseArrToResArr(<span class="keyword">int</span>[][] arr)&#123;</span><br><span class="line">        <span class="comment">//提取原数组非0元素个数，建立压缩后的数组</span></span><br><span class="line">        <span class="keyword">int</span> count1 = <span class="number">0</span>;<span class="comment">//记录非0元素的个数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr[i].length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    count1++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[][] resArr = <span class="keyword">new</span> <span class="keyword">int</span>[count1+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        </span><br><span class="line">        resArr[<span class="number">0</span>][<span class="number">0</span>] = arr.length;</span><br><span class="line">        resArr[<span class="number">0</span>][<span class="number">1</span>] = arr[<span class="number">0</span>].length;</span><br><span class="line">        resArr[<span class="number">0</span>][<span class="number">2</span>] = count1;</span><br><span class="line">        <span class="comment">//存储非0元素</span></span><br><span class="line">        <span class="keyword">int</span> count2 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr[i].length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    resArr[count2][<span class="number">0</span>] = i;</span><br><span class="line">                    resArr[count2][<span class="number">1</span>] = j;</span><br><span class="line">                    resArr[count2][<span class="number">2</span>] = arr[i][j];</span><br><span class="line">                    count2++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> resArr;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//恢复</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] resArrToSparseArr(<span class="keyword">int</span>[][] resArr)&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[resArr[<span class="number">0</span>][<span class="number">0</span>]][resArr[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=resArr[<span class="number">0</span>][<span class="number">2</span>];i++)&#123;</span><br><span class="line">            arr[resArr[i][<span class="number">0</span>]][resArr[i][<span class="number">1</span>]] = resArr[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//打印数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span>[][] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr[i].length;j++)&#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\t&quot;</span>,arr[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">链表：单链表、双链表、约瑟夫问题</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">堆栈：前缀、中缀、后缀表达式，逆波兰计算器</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">队列：数组模拟队列、数组模拟环形队列</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">哈希表（链表数组）</span></span><br><span class="line"><span class="comment">延伸：二叉树数组等各种混合结构有兴趣都可以尝试着写一写</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">图：创建和遍历（深度优先遍历和广度优先遍历）</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">排序（经典8大排序）：冒泡、选择、插入、shell、快排、基数、归并、堆</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">查找：顺序、二分、插值、斐波那契</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">递归思想：八皇后问题、迷宫问题</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">KMP和暴力匹配的比较</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分治思想：汉诺塔问题</span></span><br><span class="line"><span class="comment">问题描述：有A、B、C三个小柱子，在A上存在由上到下半径依次增加的n个圆盘，问：在保持柱子上的圆盘小在上大在下的状态的前提下，如何将A柱上的圆盘全部移动到C盘上？</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHanoiTower</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        hanoiTower(<span class="number">12</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hanoiTower</span><span class="params">(<span class="keyword">int</span> nums,<span class="keyword">char</span> A,<span class="keyword">char</span> B,<span class="keyword">char</span> C)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums==<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println(nums+<span class="string">&quot;:&quot;</span>+A+<span class="string">&quot;-&gt;&quot;</span>+C);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            hanoiTower(nums-<span class="number">1</span>,A,C,B);</span><br><span class="line">            System.out.println(nums+<span class="string">&quot;:&quot;</span>+A+<span class="string">&quot;-&gt;&quot;</span>+C);</span><br><span class="line">            hanoiTower(nums-<span class="number">1</span>,B,A,C);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">动态规划：背包问题（01背包和完全背包）</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">贪心：覆盖问题</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>semantic UI(1)</title>
      <link href="/2021/08/07/semantic-UI-1/"/>
      <url>/2021/08/07/semantic-UI-1/</url>
      
        <content type="html"><![CDATA[<h3 id="首页展示及代码解析"><a href="#首页展示及代码解析" class="headerlink" title="首页展示及代码解析"></a>首页展示及代码解析</h3><h3 id="首页效果"><a href="#首页效果" class="headerlink" title="首页效果"></a>首页效果</h3><p>![本地图片](C:\Users\Liyou\Pictures\Camera Roll\blog\首页1.PNG)</p><p>![本地图片](C:\Users\Liyou\Pictures\Camera Roll\blog\首页2.PNG)</p><h4 id="一、导航"><a href="#一、导航" class="headerlink" title="一、导航"></a>一、导航</h4><ol><li><p>展示</p><p>![本地图片](C:\Users\Liyou\Pictures\Camera Roll\blog\导航.PNG)</p></li><li><p>代码与解析</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导航--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--nav:定义导航链接的部分 ui:一个特殊的类名，用来区分组件的各个部分 inverted:反色--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--m-padded-tb-mini,--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;ui inverted attached segment m-padded-tb-mini&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--container:更好的适应移动端--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui container&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--stackable屏幕小的时候可堆叠，适应手机端--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui inverted secondary stackable menu&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;ui teal header item&quot;</span>&gt;</span>Blog<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--home idea tags clone info :Semantic UI可用图标--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;m-item item m-mobile-hide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;home icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;m-item item m-mobile-hide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;idea icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>分类<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;m-item item m-mobile-hide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;tags icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;m-item item m-mobile-hide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;clone icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>归档<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;m-item item m-mobile-hide&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;info icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>关于我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right m-item item m-mobile-hide&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui icon transparent inverted input&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Search...&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;search link icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ui menu toggle black icon button m-right-top m-mobile-show&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;sidebar icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="二、中间内容（context）"><a href="#二、中间内容（context）" class="headerlink" title="二、中间内容（context）"></a>二、中间内容（context）</h4><ol><li><p>展示</p><p>![](C:\Users\Liyou\Pictures\Camera Roll\blog\context.PNG)</p></li><li><p>代码与解析</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--中间内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;m-padded-tb-large&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui m-container container&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui stackable grid&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--左边博客内容--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;eleven wide column&quot;</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--header--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui top attached segment&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui middle aligned two column grid&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;ui teal header&quot;</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right aligned column&quot;</span>&gt;</span></span><br><span class="line">                                共 <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;ui orange header m-inline-block m-text-thin&quot;</span>&gt;</span> 14 <span class="tag">&lt;/<span class="name">h2</span>&gt;</span>篇</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--content--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui attached segment&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui padded vertical segment m-padded-tb-big&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui padded vertical segment m-padded-tb-large&quot;</span>&gt;</span></span><br><span class="line">                                <span class="comment">&lt;!--mobile reversed:手机端反转--&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui mobile reversed grid&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;eleven wide column&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;ui header&quot;</span>&gt;</span>你真正理解什么是派大星的自由吗？<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;m-text&quot;</span>&gt;</span>啊啦啦啦啦啦啦啊大量的几位偶的我带你去爱到底机房内为非法我觉得佛奥电脑阿松大<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui grid&quot;</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;eleven wide column&quot;</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui mini horizontal link list&quot;</span>&gt;</span></span><br><span class="line">                                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                                                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://picsum.photos/seed/picsum/100/100&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ui avatar image&quot;</span>&gt;</span></span><br><span class="line">                                                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>Liyou<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                                                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;calendar icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 2021-08-07</span><br><span class="line">                                                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                                                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;eye icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 231</span><br><span class="line">                                                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right aligned five wide column&quot;</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ui teal basic label m-padded-tiny m-text-thin&quot;</span>&gt;</span>认知升级<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;five wide column&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://picsum.photos/seed/picsum/800/450&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ui rounded image&quot;</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!--footer--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui bottom attached segment&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui middle aligned two column grid&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ui button mini teal basic&quot;</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right aligned column&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ui button mini teal basic&quot;</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--右边的top--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;five wide column&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!--分类--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui segments m-margin-tb-large&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui secondary segment&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui two column grid&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;idea icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>分类</span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right aligned column&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>more<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;angle double right icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui teal segment&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui fluid vertical menu&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                                    学习日志</span><br><span class="line">                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui teal basic left pointing label&quot;</span>&gt;</span>13<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                                    学习日志</span><br><span class="line">                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui teal basic left pointing label&quot;</span>&gt;</span>13<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                                    学习日志</span><br><span class="line">                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui teal basic left pointing label&quot;</span>&gt;</span>13<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                                    学习日志</span><br><span class="line">                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui teal basic left pointing label&quot;</span>&gt;</span>13<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                                    学习日志</span><br><span class="line">                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui teal basic left pointing label&quot;</span>&gt;</span>13<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                                    学习日志</span><br><span class="line">                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui teal basic left pointing label&quot;</span>&gt;</span>13<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--标签--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui segments m-margin-tb-large&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui secondary segment&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui two column grid&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;tags icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>标签</span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right aligned column&quot;</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>more<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;angle double right icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui teal segment&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;ui teal basic label m-margin-tb-tiny&quot;</span>&gt;</span></span><br><span class="line">                                方法论 <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;detail&quot;</span>&gt;</span>23<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;ui teal basic label m-margin-tb-tiny&quot;</span>&gt;</span></span><br><span class="line">                                方法论 <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;detail&quot;</span>&gt;</span>23<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;ui teal basic label m-margin-tb-tiny&quot;</span>&gt;</span></span><br><span class="line">                                方法论 <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;detail&quot;</span>&gt;</span>23<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;ui teal basic label m-margin-tb-tiny&quot;</span>&gt;</span></span><br><span class="line">                                方法论 <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;detail&quot;</span>&gt;</span>23<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;ui teal basic label m-margin-tb-tiny&quot;</span>&gt;</span></span><br><span class="line">                                方法论 <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;detail&quot;</span>&gt;</span>23<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;ui teal basic label m-margin-tb-tiny&quot;</span>&gt;</span></span><br><span class="line">                                方法论 <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;detail&quot;</span>&gt;</span>23<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;ui teal basic label m-margin-tb-tiny&quot;</span>&gt;</span></span><br><span class="line">                                方法论 <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;detail&quot;</span>&gt;</span>23<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;ui teal basic label m-margin-tb-tiny&quot;</span>&gt;</span></span><br><span class="line">                                方法论 <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;detail&quot;</span>&gt;</span>23<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;ui teal basic label m-margin-tb-tiny&quot;</span>&gt;</span></span><br><span class="line">                                方法论 <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;detail&quot;</span>&gt;</span>23<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;ui teal basic label m-margin-tb-tiny&quot;</span>&gt;</span></span><br><span class="line">                                方法论 <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;detail&quot;</span>&gt;</span>23<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!--最新推荐--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui segments m-margin-tb-large&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui secondary segment&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bookmark icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>最新推荐</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui segment&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;m-black m-text-thin&quot;</span>&gt;</span>用户故事(User Story)<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui segment&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;m-black m-text-thin&quot;</span>&gt;</span>用户故事（User Story）<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui segment&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;m-black m-text-thin&quot;</span>&gt;</span>用户故事（User Story）<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui segment&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;m-black m-text-thin&quot;</span>&gt;</span>用户故事（User Story）<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui segment&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;m-black m-text-thin&quot;</span>&gt;</span>用户故事（User Story）<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui segment&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;m-black m-text-thin&quot;</span>&gt;</span>用户故事（User Story）<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--二维码--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;ui horizontal divider header m-margin-tb-large&quot;</span>&gt;</span>扫码关注我<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui centered card&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 11em&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./static/images/wechat.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ui rounded image&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="三、底部（footer）"><a href="#三、底部（footer）" class="headerlink" title="三、底部（footer）"></a>三、底部（footer）</h4><ol><li><p>展示</p><p>![](C:\Users\Liyou\Pictures\Camera Roll\blog\底部.PNG)</p></li><li><p>代码</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;ui inverted segment vertical m-padded-tb-massive&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui center aligned container&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui stackable grid divided inverted&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;three wide column&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui inverted link list&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./static/images/wechat.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ui rounded image&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;three wide column&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;ui inverted header m-opacity-mini&quot;</span>&gt;</span>最新博客<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui inverted link list&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>用户故事（User Story）<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>关于刻意练习的清单<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>失败要趁早<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;three wide column&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;ui inverted header m-opacity-mini&quot;</span>&gt;</span>联系我<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui inverted link list&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>QQ：1458396499<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>email：hualala-2@aliyun.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--&lt;a href=&quot;#&quot; class=&quot;item&quot;&gt;用户故事（User Story）&lt;/a&gt;--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;seven wide column&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;ui inverted header m-opacity-mini&quot;</span>&gt;</span>Liyou<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;m-opacity-mini m-text-spaced m-text-thin&quot;</span>&gt;</span>这是我的个人博客，会分享关于写作、思考内容的相关问题，希望对来这边的小伙伴有所帮助！！！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui inverted section divider&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;m-text-thin m-text-spaced m-opacity-tiny&quot;</span>&gt;</span>Copyright @ 2021 hualala-2 Designed by Liyou<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>附me.css</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*css定义背景*/</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;../images/bg.gif&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.m-padded-mini</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.2em</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.m-padded-tiny</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.3em</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.m-padded-tb-mini</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">0.2em</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">0.2em</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.m-padded-tb-tiny</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">0.3em</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">0.3em</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.m-padded-tb-small</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">0.5em</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">0.5em</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.m-padded-tb</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">1em</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">1em</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.m-padded-tb-large</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">2em</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">2em</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.m-padded-tb-big</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">3em</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">3em</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.m-padded-tb-huge</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">4em</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">4em</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.m-padded-tb-massive</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">5em</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">5em</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*----text----*/</span></span><br><span class="line"><span class="selector-class">.m-text</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">300</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">1px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.m-text-thin</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">300</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.m-text-spaced</span> &#123;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">1px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.m-text-lined</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*-----------margin(边缘)---------------*/</span></span><br><span class="line"><span class="selector-class">.m-margin-tb-tiny</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0.3em</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0.3em</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.m-margin-tb-small</span>&#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0.5em</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.m-margin-tb</span>&#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">1em</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.m-margin-tb-large</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">2em</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*---------opacity（透明程度）-----------*/</span></span><br><span class="line"><span class="selector-class">.m-opacity-mini</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.8</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.m-opacity-tiny</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.6</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*------------position---------------*/</span></span><br><span class="line"><span class="selector-class">.m-right-top</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*---------display----------*/</span></span><br><span class="line"><span class="selector-class">.m-inline-block</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*-------------container----------------*/</span></span><br><span class="line"><span class="selector-class">.m-container</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">72em</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*-----------color-------------*/</span></span><br><span class="line"><span class="selector-class">.m-black</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.m-mobile-show</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*-----------当像素小于768时（手机），隐藏---------------*/</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>)&#123;</span><br><span class="line">    <span class="selector-class">.m-mobile-hide</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.m-mobile-show</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: block <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="四、参考"><a href="#四、参考" class="headerlink" title="四、参考"></a>四、参考</h3><p><a href="%5BSpringBoot%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E5%B0%8F%E8%80%8C%E7%BE%8E%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2_%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9_bilibili%5D(https://www.bilibili.com/video/BV1nE411r7TF?p=8&spm_id_from=pageDriver)">springboot开发一个小而美的个人博客</a></p><p>[html参考手册](<a href="https://www.runoob.com/tags/html-reference.html">HTML 标签列表(字母排序) | 菜鸟教程 (runoob.com)</a>)</p><p>[Semantic UI文档](<a href="https://zijieke.com/semantic-ui/elements/button.php">按钮 - Semantic UI - 字节课 (zijieke.com)</a>)</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Semantic_UI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Semantic_UI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown(Typora)</title>
      <link href="/2021/08/02/markdown-Typora/"/>
      <url>/2021/08/02/markdown-Typora/</url>
      
        <content type="html"><![CDATA[<h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><p><strong>文件——&gt;偏好设置——&gt;Markdown——&gt;取消严格模式，勾选上标、下标、高亮，重启Typora即可生效</strong></p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><ul><li><p>Java代码块</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld Java~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示方式：```java</span></span><br><span class="line"><span class="comment">// `键是Tab键上1键左边的键位</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">linux下springboot项目的启动命令</span></span><br><span class="line">java -jar blog start</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示方式：```shell</span></span><br></pre></td></tr></table></figure></li><li><p>行内代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//显示方式：` 加上 行内代码块内容 加上 `</span></span><br></pre></td></tr></table></figure><p><code>java</code></p></li></ul><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//标题语法：一个或多个#键+空格+内容</span></span><br><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--1、斜体--&gt;</span></span><br><span class="line"> *被斜体化内容*</span><br><span class="line"><span class="comment">&lt;!--2、加粗--&gt;</span></span><br><span class="line"> **加粗内容**</span><br><span class="line"><span class="comment">&lt;!--3、斜体加粗--&gt;</span></span><br><span class="line">***斜体加粗内容***</span><br><span class="line"><span class="comment">&lt;!--4、下划线--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>带有下划线内容<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--4、代码高亮显示(需勾选高亮语法)--&gt;</span></span><br><span class="line"> ==reoreoreo==</span><br><span class="line"><span class="comment">&lt;!--5、下标(需勾选下标语法)--&gt;</span></span><br><span class="line">H~2~O~2~</span><br><span class="line"><span class="comment">&lt;!--6、上标(需勾选上标语法)--&gt;</span></span><br><span class="line">m^2^</span><br><span class="line"><span class="comment">&lt;!--5、删除线--&gt;</span></span><br><span class="line"> ~~被删除内容~~</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>被斜体化的内容</em></p><p><strong>加粗内容</strong></p><p><em><strong>斜体加粗内容</strong></em></p><p><u>带有下划线内容</u></p><p>==高亮内容==</p><p>H<del>2</del>O<del>2</del></p><p>m^2^</p><p><del>被删除的内容</del></p><h2 id="表情符号"><a href="#表情符号" class="headerlink" title="表情符号"></a>表情符号</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例：:加上smile  会出现相关表情</span></span><br><span class="line"><span class="comment">// :加上100，进行点选</span></span><br><span class="line"><span class="comment">//Win10：使用win键加上.  弹出win10自带表情包</span></span><br><span class="line"><span class="comment">//mac：control+command+space点选</span></span><br></pre></td></tr></table></figure><p>:smile:</p><p>:100:</p><p>:radioactive:</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用语法</span></span><br><span class="line">&gt;一级引用</span><br><span class="line">&gt;&gt;二级引用</span><br><span class="line">&gt;&gt;&gt;三级引用</span><br></pre></td></tr></table></figure><blockquote><p>一级引用</p><p>的撒大大大大大</p></blockquote><blockquote><blockquote><p>二级引用</p></blockquote></blockquote><blockquote><blockquote><blockquote><p>三级引用</p></blockquote></blockquote></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分割线1</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">//分割线2</span></span><br><span class="line">***</span><br></pre></td></tr></table></figure><hr><hr><h2 id="图片插入"><a href="#图片插入" class="headerlink" title="图片插入"></a>图片插入</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//本地图片、在线图片</span></span><br><span class="line">![图片名称](图片路径)</span><br></pre></td></tr></table></figure><p><img src="https://gss0.baidu.com/9vo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/0824ab18972bd40714ed5f2c7c899e510fb3093c.jpg" alt="三笠"></p><h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><p>使用CTRL+click可在文件内跳转</p><ul><li><p>外部跳转——超链接</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//超链接语法</span></span><br><span class="line">[我的链接名](链接地址)</span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/">哔哩哔哩网站</a></p></li><li><p>内部跳转——本文件内跳（Typora支持）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//内部链接语法</span></span><br><span class="line">[我的链接名](#链接地址)</span><br></pre></td></tr></table></figure><p><a href="#%E4%BB%A3%E7%A0%81%E5%9D%97">回到代码块</a></p></li><li><p>自动链接</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自动链接语法</span></span><br><span class="line"><span class="comment">//使用&lt;&gt;包括的URL或邮箱地址，会被自动转为超链接</span></span><br><span class="line">&lt;链接地址&gt;</span><br></pre></td></tr></table></figure><p><a href="https://www.baidu.com/">https://www.baidu.com</a></p><p><a href="mailto:&#49;&#50;&#51;&#64;&#x65;&#109;&#x61;&#x69;&#108;&#x2e;&#x63;&#111;&#x6d;">&#49;&#50;&#51;&#64;&#x65;&#109;&#x61;&#x69;&#108;&#x2e;&#x63;&#111;&#x6d;</a></p></li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、无序列表</span></span><br><span class="line">-（空一格）加上  目录</span><br><span class="line"><span class="comment">//2、有序列表</span></span><br><span class="line">编号加上 . （空一格）加上  目录</span><br></pre></td></tr></table></figure><ul><li>目录1</li><li>目录2</li></ul><ol><li>目录1</li><li>目录2</li></ol><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//右键直接插入即可</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>嗡嗡嗡</th><th>事实上</th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>#画图篇</p><p>利用Markdown画图（需勾选扩展语法）</p><h2 id="流程图（graph）"><a href="#流程图（graph）" class="headerlink" title="流程图（graph）"></a>流程图（graph）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">操作流程：</span></span><br><span class="line"><span class="comment">1、如同代码块一样，输入```mermaid</span></span><br><span class="line"><span class="comment">2、在代码块中输入流程图的描述：</span></span><br><span class="line"><span class="comment">    graph TD;</span></span><br><span class="line"><span class="comment">A(开始j=0)--&gt;B&#123;arrj&gt;arrj+1&#125;;</span></span><br><span class="line"><span class="comment">B--是--&gt;C[交换位置];</span></span><br><span class="line"><span class="comment">B--否--&gt;D;</span></span><br><span class="line"><span class="comment">C--&gt;D[j+1];</span></span><br><span class="line"><span class="comment">D--&gt;B;</span></span><br><span class="line"><span class="comment">如下所示。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>冒泡算法：1、开始：输入一个整型数组arr；2、拿到数组0位置上的数arr[0]；3、与相邻位置的数进行比较if</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//冒泡排序(从小到大)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBubble</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testBubble</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//遍历了arr.length-1次</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="comment">//1、从0位置开始遍历数组，相邻位置的值进行比较</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr.length-<span class="number">1</span>-i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">A1(开始)--&gt;A2;</span><br><span class="line">A2(j=0)--&gt;B&#123;j小于arr.length-1&#125;;</span><br><span class="line">B--是--&gt;C&#123;arrj小于arrj+1&#125;;</span><br><span class="line">B--否--&gt;F(结束);</span><br><span class="line">C--是--&gt;D[交换位置];</span><br><span class="line">D--&gt;E;</span><br><span class="line">C--否--&gt;E[j=j+1];</span><br><span class="line">E--&gt;B;</span><br></pre></td></tr></table></figure><p>方向描述：</p><table><thead><tr><th align="center">用词</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">TB（top、bottom）、TD（down）</td><td align="center">从上到下</td></tr><tr><td align="center">BT</td><td align="center">从下到上</td></tr><tr><td align="center">RL（right、left）</td><td align="center">从右到左</td></tr><tr><td align="center">LR</td><td align="center">从左到右</td></tr></tbody></table><p>节点形状：</p><table><thead><tr><th align="center">表述</th><th align="center">说明</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">id[文字]</td><td align="center">矩形节点</td><td align="center">表示过程，也就是整个流程中的一个环节</td></tr><tr><td align="center">id(文字)</td><td align="center">圆角矩形节点</td><td align="center">表示开始和结束</td></tr><tr><td align="center">id((文字))</td><td align="center">圆形节点</td><td align="center">表示连接。为避免流程过长或有交叉，可将流程切开。成对</td></tr><tr><td align="center">id{文字}</td><td align="center">菱形节点</td><td align="center">表示判断、决策</td></tr><tr><td align="center">id&gt;文字]</td><td align="center">右向旗帜状节点</td><td align="center"></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">graph LR;</span></span><br><span class="line"><span class="comment">A(表过程)--&gt;B(开始与结束节点);</span></span><br><span class="line"><span class="comment">B--&gt;C((表连接));</span></span><br><span class="line"><span class="comment">C--&gt;D&#123;表判断&#125;;</span></span><br><span class="line"><span class="comment">D--&gt;F&gt;旗帜节点];</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">A(表过程)--&gt;B(开始与结束节点);</span><br><span class="line">B--&gt;C((表连接));</span><br><span class="line">C--&gt;D&#123;表判断&#125;;</span><br><span class="line">D--&gt;F&gt;旗帜节点];</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://www.bilibili.com/video/av87982836#reply2366896129">Markdown保姆级教程之基础篇（Typora使用教程）_哔哩哔哩_bilibili</a></p><p><a href="https://typora.io/">Typora — a markdown editor, markdown reader.</a></p><p><a href="http://soft.xiaoshujiang.com/docs/grammar/feature/mermaid/#e6a682e8bfb0_1">小书匠语法说明之mermaid | 小书匠 (xiaoshujiang.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建与优化</title>
      <link href="/2021/08/02/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BC%98%E5%8C%96/"/>
      <url>/2021/08/02/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    该博客网站使用的是Hexo框架+Butterfly主题。</p><p>​    首先，Hexo是什么呢？Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>​    简而言之，Hexo就是一款专门用于搭建博客的模板，类比我们写简历时本已提供的简历模板，我们获得一个简历模板后，则可以填写一些相关的信息。而我们获得一个博客模板之后，则是对博客模板进行主题配置等操作，让其个性化。</p><p>​    那我们怎样获得一个博客模板呢？如下操作：</p><p>​    操作系统：window10 </p><p>​    在cmd或git bash窗口执行命令</p><h1 id="博客搭建与部署"><a href="#博客搭建与部署" class="headerlink" title="博客搭建与部署"></a>博客搭建与部署</h1><h2 id="安装nodejs和git"><a href="#安装nodejs和git" class="headerlink" title="安装nodejs和git"></a>安装nodejs和git</h2><p>由于Hexo需要nodejs和git做支持，所以前置步骤即安装nodejs和git。</p><p>nodejs下载地址：<a href="https://nodejs.org/en/">Node.js (nodejs.org)</a></p><p>git下载地址：<a href="https://git-scm.com/">Git (git-scm.com)</a></p><p>下载长期维护的对应版本即可。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">node</span> <span class="string">--version</span> <span class="comment">#查看nodejs版本，确认安装成功</span></span><br><span class="line"><span class="string">npm</span> <span class="string">-v</span> <span class="comment">#查看包管理器版本</span></span><br><span class="line"><span class="comment">#由于镜像源的速度很慢，所以先利用npm安装一个cnpm</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">cnpm</span> <span class="string">--registry=https://registry.npm.taobao.org</span></span><br><span class="line"><span class="string">cnpm</span> <span class="comment">#确认cnpm安装成功 </span></span><br><span class="line"><span class="string">cnpm</span> <span class="string">-v</span></span><br></pre></td></tr></table></figure><h2 id="安装Hexo博客框架"><a href="#安装Hexo博客框架" class="headerlink" title="安装Hexo博客框架"></a>安装Hexo博客框架</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#利用cnpm全局安装Hexo博客框架</span></span><br><span class="line"><span class="string">cnpm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span></span><br><span class="line"><span class="comment">#显示版本号，确认Hexo安装完成</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">-v</span></span><br></pre></td></tr></table></figure><h2 id="使用Hexo博客框架生成博客"><a href="#使用Hexo博客框架生成博客" class="headerlink" title="使用Hexo博客框架生成博客"></a>使用Hexo博客框架生成博客</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#建立一个名为blog的空文件夹</span></span><br><span class="line"><span class="comment">#在名为blog的文件夹下进行hexo的初始化，即执行hexo init命令</span></span><br><span class="line"><span class="comment">#之后博客的一切活动都在blog文件夹下进行，出问题，干掉重开即可</span></span><br><span class="line"><span class="comment">#显示INFO Start blogging with Hexo！即安装完成！</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">init</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动博客(s:start)</span></span><br><span class="line"><span class="comment">#Hexo is running at http://localhost:4000 . </span></span><br><span class="line"><span class="comment">#本地通过4000端口即可访问</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">s</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#写一篇博客（n：new）</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">n</span> <span class="string">&quot;我的第一篇博客文章&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#清除缓存文件（db.json）和已生成的静态文件（public），在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#生产静态文件(generate)</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">g</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重新启动，便可以在本地4000端口获得新写的博客内容啦！！!</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">s</span> </span><br></pre></td></tr></table></figure><h2 id="部署博客到远端"><a href="#部署博客到远端" class="headerlink" title="部署博客到远端"></a>部署博客到远端</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将博客部署在GitHub上</span></span><br><span class="line"><span class="comment">#1、打开github，新建一个空仓库</span></span><br><span class="line"><span class="comment">#仓库名必须符合特定要求，即 昵称.github.io，如我的昵称是hualala-2,则仓库名为hualala-2.github.io</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#回到命令行进行操作</span></span><br><span class="line"><span class="comment">#2、在blog目录下安装一个部署的插件</span></span><br><span class="line"><span class="string">cnpm</span> <span class="string">install</span> <span class="string">--save</span> <span class="string">hexo-deployer-git</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、设置blog文件夹下的名为_config.yml的文件</span></span><br><span class="line"><span class="comment">#进入文件，扫描到末尾Deployment（填写时，注意空格）</span></span><br><span class="line"><span class="comment">#deploy:</span></span><br><span class="line"><span class="comment">#type: git</span></span><br><span class="line"><span class="comment">#repo: http://github.com/hualala-2/hualala-2.github.io.git</span></span><br><span class="line"><span class="comment">#branch: master</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4、部署博客到远端</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">d(deploy)</span></span><br></pre></td></tr></table></figure><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、clone Butterfly主题，将其放置在themes/Butterfly的位置</span></span><br><span class="line"><span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/jerryc127/hexo-theme-butterfly.git</span> <span class="string">themes/Butterfly</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、在_config.yml下更改theme，启用主题。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、执行hexo d推送到远端</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">d</span></span><br></pre></td></tr></table></figure><h1 id="Butterfly主题优化"><a href="#Butterfly主题优化" class="headerlink" title="Butterfly主题优化"></a>Butterfly主题优化</h1><h2 id="blog文件夹介绍"><a href="#blog文件夹介绍" class="headerlink" title="blog文件夹介绍"></a>blog文件夹介绍</h2><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">├──</span> <span class="string">_config.yml</span></span><br><span class="line"><span class="string">├──</span> <span class="string">package.json</span></span><br><span class="line"><span class="string">├──</span> <span class="string">scaffolds</span></span><br><span class="line"><span class="string">├──</span> <span class="string">source</span></span><br><span class="line"><span class="string">|</span>   <span class="string">├──</span> <span class="string">_drafts</span></span><br><span class="line"><span class="string">|</span>   <span class="string">└──</span> <span class="string">_posts</span></span><br><span class="line"><span class="string">└──</span> <span class="string">themes</span></span><br></pre></td></tr></table></figure><p>_config.yml：网站的配置信息，您可以在此配置大部分的参数。</p><p>package.json：应用程序的信息，EJS, Stylus和 Markdown renderer 已默认安装，您可以自由移除。</p><p>scaffolds：模板文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><p>source：资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p><p>themes：主题文件夹。Hexo 会根据主题来生成静态页面。</p><p>更多关于blog文件夹下的_config.yml的配置，前往<a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a>查看即可，写的很详细。</p><h2 id="Butterfly美化"><a href="#Butterfly美化" class="headerlink" title="Butterfly美化"></a>Butterfly美化</h2><h3 id="导航栏修改"><a href="#导航栏修改" class="headerlink" title="导航栏修改"></a>导航栏修改</h3><p>导航栏展示：</p><img src="..\博客搭建与优化\导航栏.PNG"/><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">文章||fas</span> <span class="attr">fa-feather-alt:</span></span><br><span class="line">      <span class="string">时间轴:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">      <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">      <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">娱乐||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">      <span class="string">音乐:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">      <span class="string">电影:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line">  <span class="string">留言板:</span> <span class="string">/messageboard/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-paper-plane</span></span><br><span class="line">  <span class="string">优链:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="string">关于我:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><p>如：fas fa-home或者fas fa-folder-open这样的图标，可以参看<a href="https://www.runoob.com/font-awesome/fontawesome-icons-hand.html">Font Awesome 手势图标 | 菜鸟教程 (runoob.com)</a>和<a href="https://getkit.cn/resources/font-awesome/">Font Awesome 字体图标对照表 (getkit.cn)</a>或其他相关网站。</p><p>美化实在是个深坑坑，挖坑挖坑（滑稽）</p><h2 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h2><ul><li><p>Markdown图片无法显示的问题</p><p>采用HTML的图片引入标签。（MD支持html）</p><p>图片放在blog&gt;source&gt;_post&gt;文件夹（根据具体文章名新建相同名称的文件夹）&gt;具体图片</p><p>执行hexo d部署到远端后，在本地查看 ：public&gt;具体时间文件夹</p><p>使用图片的相对路径即可</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图片路径&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>1、<a href="https://hexo.io/zh-cn/">Hexo</a></p><p>2、<a href="https://www.bilibili.com/video/BV1Yb411a7ty?from=search&seid=7177332002560852852&spm_id_from=333.337.0.0">手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo_哔哩哔哩_bilibili</a></p><p>3、<a href="https://www.little-demon.cn/post/f9e71d59.html">Butterfly基础美化 | Little-Demon’s Blog</a></p><p>4、<a href="https://www.runoob.com/">菜鸟教程</a></p><p>5、<a href="https://getkit.cn/resources/">鸽听网|在线工具 (getkit.cn)</a></p><p>6、<a href="https://www.antmoe.com/posts/75a6347a/">Hexo安装并使用Butterfly主题 | 小康博客 (antmoe.com)</a></p><p>7、<a href="https://snow.js.org/">小林书架blog </a></p><p>8、<a href="https://butterfly.lete114.top/">Lete乐特 ‘s Blog - Lete乐特个人博客 (lete114.top)</a></p><p>9、<a href="https://www.cnblogs.com/big0range/p/14229322.html">手摸手带你用Hexo撸博客(三)之添加评论系统 - big0range - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务</title>
      <link href="/2021/08/01/%E4%BA%8B%E5%8A%A1/"/>
      <url>/2021/08/01/%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="事务定义"><a href="#事务定义" class="headerlink" title="事务定义"></a>事务定义</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一条或多条sql语句的独立运行单元</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="事务的四大属性（acid）"><a href="#事务的四大属性（acid）" class="headerlink" title="事务的四大属性（acid）"></a>事务的四大属性（acid）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">原子性（auto）：</span></span><br><span class="line"><span class="comment">一致性（consistence）:</span></span><br><span class="line"><span class="comment">隔离性（isolution）：</span></span><br><span class="line"><span class="comment">持久性（druable）:</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="隔离的级别"><a href="#隔离的级别" class="headerlink" title="隔离的级别"></a>隔离的级别</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">（事务T1和事务T2读取同一张表的数据）</span></span><br><span class="line"><span class="comment">脏读：T1读取T2更新但未提交的数据</span></span><br><span class="line"><span class="comment">不可重复读：T1读取T2已提交的数据，导致同一条数据，前后访问不一致</span></span><br><span class="line"><span class="comment">幻读：T1读取到T2新插入的数据</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="事务的书写"><a href="#事务的书写" class="headerlink" title="事务的书写"></a>事务的书写</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set autocommit=0;</span><br><span class="line">start transaction;</span><br><span class="line">update user set name=&#x27;JoJo&#x27; where id = 1;</span><br><span class="line">update user set name=&#x27;Dio&#x27; where id = 2;</span><br><span class="line">commit;(rollback;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
